<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Data.Training">
<Description>
Training</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13359.879291</TimeCreated>

<Property name="Teacher">
<Description>
Teacher</Description>
<Type>Person</Type>
<Required>1</Required>
</Property>

<Property name="CuratorFullName">
<Description>
Curator full name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="CuratorEmail">
<Description>
Curator full name</Description>
<Type>%String</Type>
</Property>

<Property name="CuratorPhone">
<Description>
Curator phone</Description>
<Type>%String</Type>
</Property>

<Property name="CuratorPhoneSecret">
<Description>
Curator secret phone</Description>
<Type>%String</Type>
</Property>

<Property name="Course">
<Description>
Course</Description>
<Type>Course</Type>
<Required>1</Required>
</Property>

<Property name="SubGroups">
<Description>
Subgroups with students</Description>
<Type>SubGroup</Type>
<Collection>array</Collection>
</Property>

<Property name="City">
<Description>
City of training</Description>
<Type>Region</Type>
<Required>1</Required>
</Property>

<Property name="Street">
<Description>
Address</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Room">
<Description>
Room</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Latitude">
<Description>
Latitude</Description>
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="Longitude">
<Description>
Longitude</Description>
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="DateStart">
<Description>
Training start date</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="DateFinish">
<Description>
Training finish date</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="TimeStart">
<Description>
Training start time</Description>
<Type>%Time</Type>
<Required>1</Required>
</Property>

<Property name="TimeFinish">
<Description>
Training finish time</Description>
<Type>%Time</Type>
<Required>1</Required>
</Property>

<Property name="IsCompleted">
<Description>
Training is finished</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IsStudentsAutoMailing">
<Description>
Automailing to students in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsFeedBackAutoMailing">
<Description>
Automailing to students in after training</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsTeacherAutoMailing">
<Description>
Automailing to teachers in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsCuratorAutoMailing">
<Description>
Automailing to curator in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsOrdersAutoMailing">
<Description>
Automailing to contacts in approved orders in the evening </Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="OtherInfo">
<Description>
Other information</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="CalendarEvent">
<Description>
EventId Google Calendar</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="NewStudents">
<Description>
New applications from students for this certain training</Description>
<Type>Stc.Data.OrderNewStudent</Type>
<Cardinality>many</Cardinality>
<Inverse>Training</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="FeedBacks">
<Description>
FeedBacks</Description>
<Type>Stc.Data.FeedBack</Type>
<Cardinality>children</Cardinality>
<Inverse>Training</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="AccessCode">
<Description>
Access code to training for teacher</Description>
<Type>%String</Type>
</Property>

<Property name="CreatedTS">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="IsCertificatesDone">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Index name="AccessCodeIdx">
<Properties>AccessCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="CheckDeletePrivilege">
<Description>
Check delete privilege</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	SET SQLCODE=""
	&sql(%CHECKPRIV DELETE ON Stc_Data.Training)
	if (SQLCODE = 100) quit ##class(Stc.Utils.Msg).GetErrorStatus("NoPrivilege", " USERNAME="_$USERNAME)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="BuildCubes">
<Description>
Build TrainingCube and SubGroupCube</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(%DeepSee.Utils).%BuildCube("TrainingCube",1,0)
	do ##class(%DeepSee.Utils).%BuildCube("SubGroupCube",1,0)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateFacts">
<Description>
UpdateFact in TrainingCube and all subgroup facts in SubGroupCube</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(%DeepSee.Utils).%ProcessFact("TrainingCube",trId)
	
	&sql(DECLARE TrCur CURSOR FOR 
		 	 SELECT ID 
		 	 FROM Stc_Data.Training_SubGroups
		 	 WHERE Training = :trId)	
		
	&sql(OPEN TrCur)
	for  
	{	
		&sql(FETCH TrCur INTO :trSgId) 
		quit:(SQLCODE '= 0)
		
		do ##class(%DeepSee.Utils).%ProcessFact("SubGroupCube",trSgId)	
	}
		
	&sql(CLOSE TrCur)
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<FormalSpec>shortInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.accessCode = ..AccessCode
	set proxy.event = ..CalendarEvent
	set proxy.city = ..City.ConvertToProxyObject()
	set proxy.course = ..Course.ConvertToProxyObject(1)
	set proxy.teacher = ..Teacher.ConvertToProxyObject()
	set proxy.dateStart = $ZDATE(..DateStart, 3)
	set proxy.dateFinish = $ZDATE(..DateFinish, 3)
	set proxy.isCompleted = ..IsCompleted	
	set proxy.isCertificatesDone = ..IsCertificatesDone
	
	set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart), 1, 5)
	set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish), 1, 5)
	set proxy.timeStartFinish = proxy.timeStart_" - "_proxy.timeFinish
	
	set proxy.otherInfo = ..OtherInfo.Value
	set proxy.room = ..Room
	set proxy.address = ##class(%ZEN.proxyObject).%New()
	set proxy.address.title = ..Street.Value
	set proxy.address.point = ..Longitude_" "_..Latitude
	set proxy.isStudentsAutoMailing = ..IsStudentsAutoMailing
	set proxy.isTeacherAutoMailing = ..IsTeacherAutoMailing
	set proxy.isCuratorAutoMailing = ..IsCuratorAutoMailing
	set proxy.isFeedBackAutoMailing = ..IsFeedBackAutoMailing

	if (shortInfo = 1) quit proxy
	
	set proxy.curator = ##class(%ZEN.proxyObject).%New() 
	set proxy.curator.fullName = ..CuratorFullName.Value
	set proxy.curator.email = ..CuratorEmail
	set proxy.curator.phone = ..CuratorPhone
	set proxy.curator.phoneSecret = ..CuratorPhoneSecret
	
	set proxy.feedBacks = ##class(%ZEN.proxyObject).%New()
	set proxy.feedBacks.count = ..FeedBacks.Count()
	
	set proxy.certificates = 0
	&sql(SELECT COUNT(ID) INTO :proxy.certificates FROM Stc_Data.Certificate WHERE Training = :proxy.id)
	
	set proxy.newStudents = ..NewStudents.Count()
	set proxy.sgroups = ..SubGroups.Count()
	set proxy.students = 0

	set key = ""
	for i=1:1:..SubGroups.Count(){
		set key = ..SubGroups.Next(key)
		set sgroup = ..SubGroups.GetAt(key)
		
		set proxy.students = proxy.students + sgroup.Students.Count()
	}
	
	// Training's cost and currency
	set proxy.cost = ##class(%ZEN.proxyObject).%New()
	set proxy.cost.price = ..Course.Price
	set proxy.cost.currency = ..Course.Currency.ConvertToProxyObject()
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Training</ReturnType>
<Implementation><![CDATA[
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
	"ID="_data.id_
	"; CourseID="_data.course.id_
	"; CityID="_data.city.id_
	"; TeacherID="_data.teacher.id_
	"; CuratorFullName="_$ZCONVERT(data.curator.fullName, "I","UTF8")_
	"; CuratorEmail="_data.curator.email_
	"; CuratorPhone="_data.curator.phone_
	"; DateStart="_data.dateStart_
	"; DateFinish="_data.dateFinish_
	"; Street="_$ZCONVERT(data.address.title, "I","UTF8")_
	"; Point="_data.address.point_
	"; OtherInfo="_$ZCONVERT(data.otherInfo, "I","UTF8"))
	
	if (data.id = ""){
		set tr = ..%New()
		set tr.CreatedTS = $ZDT($ZTS, 3)
		set tr.CuratorFullName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.curator.fullName, "I","UTF8"),"Stc.Data.Localization.Translation;PersonLTextValue")
		set tr.CuratorEmail = data.curator.email
		set tr.CuratorPhone = data.curator.phone
		
		set tr.Street = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.address.title, "I","UTF8"))
		set tr.OtherInfo = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.otherInfo, "I","UTF8"))
		set tr.AccessCode = $SYSTEM.Util.CreateGUID()
	}
	else{
		set tr = ..%OpenId(data.id)
		set tr.CuratorFullName.Value = $ZCONVERT(data.curator.fullName, "I","UTF8")
		set tr.Street.Value = $ZCONVERT(data.address.title, "I","UTF8")
		set tr.OtherInfo.Value = $ZCONVERT(data.otherInfo, "I","UTF8")
	}
	
	set tr.CuratorEmail = data.curator.email
	set tr.CuratorPhone = data.curator.phone
	set tr.CuratorPhoneSecret = data.curator.phoneSecret
	set tr.IsCertificatesDone = data.isCertificatesDone = $$$YES
		
		
	set tr.DateFinish = $ZDATEH(data.dateFinish, 15)
	set tr.DateStart = $ZDATEH(data.dateStart, 15)
	set tr.TimeFinish = ##class(%Library.Time).DisplayToLogical(data.timeFinish)
	set tr.TimeStart = ##class(%Library.Time).DisplayToLogical(data.timeStart)
	set tr.Room = $ZCONVERT(data.room, "I","UTF8")
	set tr.Latitude = $p(data.address.point, " ", 2)
	set tr.Longitude = $p(data.address.point, " ", 1)
	
	set tr.Course = ##class(Course).%OpenId(data.course.id)
	set tr.Teacher = tr.Course.Teachers.GetAt(data.teacher.id) // ##class(Person).%OpenId(data.teacher.id)
	set tr.City = ##class(Region).%OpenId(data.city.id)
	
	set status = tr.%Save()
	quit tr
]]></Implementation>
</Method>

<Method name="DeleteSubGroup">
<Description>
Delete subgroup from training, without deleting students</Description>
<FormalSpec>sgId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..SubGroups.RemoveAt(sgId)
	
	set sgroup = ##class(Stc.Data.SubGroup).%OpenId(sgId)
	
	set st = ##class(Stc.Data.Localization.LText).Delete(sgroup.SignerFullName.%Id())
	quit:$$$ISERR(st) st
	
	set st = ##class(Stc.Data.Localization.LText).Delete(sgroup.DocumentInfo.%Id())
	quit:$$$ISERR(st) st
	
	quit ##class(Stc.Data.SubGroup).%DeleteId(sgId)
]]></Implementation>
</Method>

<Method name="CreateCertificates">
<Description>
Create certificates for all students</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set listOfStudents = ##class(%ListOfObjects).%New()
	
	set keyGr = ""
	for i=1:1:..SubGroups.Count(){
		set keyGr = ..SubGroups.Next(keyGr)
		set sgroup = ..SubGroups.GetAt(keyGr)
			
		set keySt = ""
		for j=1:1:sgroup.Students.Count(){
			set keySt = sgroup.Students.Next(keySt)
			set student = sgroup.Students.GetAt(keySt)
				
			do listOfStudents.Insert(student)
		}
	}
	
	quit ##class(Stc.Data.Certificate).CreateAll($this, listOfStudents)
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete training with applications</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	set training = ..%OpenId(id, 4)
	
	set key = ""
	for i=1:1:training.NewStudents.Count(){
		set key = training.NewStudents.Next(key)
		set order = training.NewStudents.GetAt(key)
		set st = ##class(Stc.Data.OrderNewStudent).Delete(order.%Id())
		if $$$ISERR(st) RETURN st
	}
	
	set st = ##class(Stc.Data.Localization.LText).Delete(training.CuratorFullName.%Id())
	quit:$$$ISERR(st) st
	
	set st = ##class(Stc.Data.Localization.LText).Delete(training.Street.%Id())
	quit:$$$ISERR(st) st
	
	set st = ##class(Stc.Data.Localization.LText).Delete(training.OtherInfo.%Id())
	quit:$$$ISERR(st) st
	
	kill training
	
	quit ..%DeleteId(id, 4)
]]></Implementation>
</Method>

<Method name="AddPersonIntoTraining">
<Description>
Add person to training, subgroup is detirmining automatically</Description>
<FormalSpec>personId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	set trainingId = ..%Id()
	
	// Search student in training to avoid situation, 
	// when student in two different subgroups of one training
	set contains = 0
	&sql(SELECT COUNT(ID) INTO :contains
		 FROM Stc_Data.SubGroup_Students
		 WHERE SubGroup IN (SELECT $PIECE(ID,'||',2) 
		 					FROM Stc_Data.Training_SubGroups 
		 					WHERE Training = :trainingId) 
		 				AND Students = :personId)
	
	 
	if (contains '= 0) quit ##class(Stc.Utils.Msg).GetErrorStatus("personContainsInTraining")
	
	// If training has no this person, maybe training his organization's subgroup
	set person = ##class(Stc.Data.Person).%OpenId(personId)
	set personCompanyId = person.Company.%Id()
	set sgroupId = ""
	
	&sql(SELECT $PIECE(ID,'||',2) INTO :sgroupId FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId AND SubGroups->Payer = :personCompanyId)
	
	if (sgroupId = ""){
		// If training has no organization's subgroup, create subgroup and add person to it
		set array = ##class(%ArrayOfObjects).%New()
		do array.SetAt(person, personId)
		set sgroup = ##class(Stc.Data.SubGroup).Create(person.Company, array, ..Course, .status)
		
		if $$$ISERR(status) quit status
		
		do ..SubGroups.SetAt(sgroup, sgroup.%Id())
	}
	else{
		// If training has organization's subgroup, just add person to it
		set group = ..SubGroups.GetAt(sgroupId)
		do group.Students.SetAt(person, personId)
		set status = group.%Save()
		
		if $$$ISERR(status) quit status
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="ConvertToProxyObjectForPublic">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.city = ..City.ConvertToProxyObject()
	set proxy.course = ..Course.ConvertToProxyObject()
	set proxy.teacher = ..Teacher.ConvertToProxyObject()
	set proxy.teacher.phone = ""
	set proxy.teacher.company = ""
	
	set proxy.dateStart = $ZDATE(..DateStart, 3)
	set proxy.dateFinish = $ZDATE(..DateFinish, 3)
	set proxy.dateGoogleCalendar = $REPLACE($ZD(..DateStart, 3)_"/"_$ZD(..DateFinish+1, 3), "-", "")
	
	set proxy.isCompleted = ..IsCompleted	
	
	set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart), 1, 5)
	set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish), 1, 5)
	
	set proxy.otherInfo = ..OtherInfo.Value
	set proxy.room = ..Room
	set proxy.address = ##class(%ZEN.proxyObject).%New()
	set proxy.address.title = ..Street.Value
	set proxy.address.point = ..Longitude_" "_..Latitude
	set proxy.address.lat = ..Latitude
	set proxy.address.lng = ..Longitude
	
	set proxy.curator = ##class(%ZEN.proxyObject).%New() 
	set proxy.curator.fullName = ..CuratorFullName.Value
	set proxy.curator.email = ..CuratorEmail
	set proxy.curator.phone = ..CuratorPhone
	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetCalendarEventDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set descr = ""
	
	try{
		/*
			<a href='http://%1'>Программа курса</a><br><br>
			<a href='http://%2'>Записаться на обучение</a><br><br>
			Место проведения:<br>
			%3<br><br>
			Преподаватель:<br>
			%4<br><br>
			Время проведения: %5<br>
			%6%7
		*/
		
		set pattern = ##class(Stc.Utils.Msg).GetMsg("CalendarEvent")
		set urlJoin = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/order" 
		set urlCourse = tr.Course.ProgramUrl
		set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
		set street = tr.Street.Value
		set room = tr.Room
		set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
		set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email								
		set curatorData = ""
		
		if (tr.CuratorFullName.Value '= ""){
			set curatorData = "<br>"_##class(Stc.Utils.Msg).GetMsg("contactPerson")_":<br>"_tr.CuratorFullName.Value
			
			if (tr.CuratorPhone '= ""){
				set curatorData = curatorData_", "_tr.CuratorPhone
			}
			
			set curatorData = curatorData_"<br>"
		}
					
		set otherInfoData = ""
		if (tr.OtherInfo.Value '= ""){
			set otherInfoData = "<br>"_tr.OtherInfo.Value
		}
					
		set descr = ##class(%MessageDictionary).FormatText(pattern, urlCourse, urlJoin, cityFullName_"<br>"_street_", "_room, teacherData, time, curatorData, otherInfoData)
	}
	catch(ex){
		set descr = ex.AsStatus()
	}
	
	quit descr
]]></Implementation>
</Method>

<Method name="GetStudentsContacts">
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set contacts = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE TrStudEmCur CURSOR FOR 
			 	 SELECT Students As ID, Students->FullName As FullName, Students->Email 
			 	 FROM Stc_Data.SubGroup_Students
			 	 WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trId)
			 	 ORDER BY FullName)	
			
	&sql(OPEN TrStudEmCur)
	for  
	{	
		&sql(FETCH TrStudEmCur INTO :id, :fullName, :email) 
		quit:(SQLCODE '= 0)
		set item = ##class(%ZEN.proxyObject).%New()
		set item.id = id
		set item.name = fullName
		set item.email = email
		do contacts.Insert(item)	
	}
	&sql(CLOSE TrStudEmCur)
	
	quit contacts
]]></Implementation>
</Method>

<Method name="GetAccessCodeForFeedbackList">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash(..AccessCode_..Teacher.Email)), "/", "")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.TrainingD</DataLocation>
<DefaultData>TrainingDefaultData</DefaultData>
<IdLocation>^Stc.Data.TrainingD</IdLocation>
<IndexLocation>^Stc.Data.TrainingI</IndexLocation>
<StreamLocation>^Stc.Data.TrainingS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SubGroups">
<Attribute>SubGroups</Attribute>
<Structure>subnode</Structure>
<Subscript>"SubGroups"</Subscript>
</Data>
<Data name="TrainingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Teacher</Value>
</Value>
<Value name="3">
<Value>City</Value>
</Value>
<Value name="4">
<Value>Course</Value>
</Value>
<Value name="5">
<Value>Street</Value>
</Value>
<Value name="6">
<Value>Room</Value>
</Value>
<Value name="7">
<Value>Latitude</Value>
</Value>
<Value name="8">
<Value>Longitude</Value>
</Value>
<Value name="9">
<Value>TrainingTS</Value>
</Value>
<Value name="10">
<Value>DateStart</Value>
</Value>
<Value name="11">
<Value>DateFinish</Value>
</Value>
<Value name="12">
<Value>TimeStart</Value>
</Value>
<Value name="13">
<Value>TimeFinish</Value>
</Value>
<Value name="14">
<Value>OtherInfo</Value>
</Value>
<Value name="15">
<Value>IsCompleted</Value>
</Value>
<Value name="16">
<Value>SubGroupNumber</Value>
</Value>
<Value name="17">
<Value>CalendarEvent</Value>
</Value>
<Value name="18">
<Value>IsAutoMailing</Value>
</Value>
<Value name="19">
<Value>AccessCode</Value>
</Value>
<Value name="20">
<Value>IsStudentsAutoMailing</Value>
</Value>
<Value name="21">
<Value>IsTeacherAutoMailing</Value>
</Value>
<Value name="22">
<Value>CuratorFullName</Value>
</Value>
<Value name="23">
<Value>CuratorEmail</Value>
</Value>
<Value name="24">
<Value>CuratorPhone</Value>
</Value>
<Value name="25">
<Value>IsFeedBackAutoMailing</Value>
</Value>
<Value name="26">
<Value>IsCuratorAutoMailing</Value>
</Value>
<Value name="27">
<Value>CuratorPhoneSecret</Value>
</Value>
<Value name="28">
<Value>IsOrdersAutoMailing</Value>
</Value>
<Value name="29">
<Value>CreatedTS</Value>
</Value>
<Value name="30">
<Value>IsCertificatesDone</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
