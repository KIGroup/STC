<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Data.Course">
<Description>
Course</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,13286.897066</TimeCreated>

<Property name="Name">
<Description>
Name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Description">
<Description>
Description</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Hours">
<Description>
Duration (in hours)</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Days">
<Description>
Duration (in days)</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="ProgramUrl">
<Description>
Link to course syllabus</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2500"/>
</Property>

<Property name="Teachers">
<Description>
Teachers</Description>
<Type>Person</Type>
<Collection>array</Collection>
</Property>

<Property name="IsInUse">
<Description>
Is active</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Price">
<Description>
Price of course</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="HourPayout">
<Description>
Payout for teacher services (1 hour)</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Currency">
<Description>
Currency</Description>
<Type>Currency</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="DifficultyCoefficient">
<Description>
Difficulty coefficient</Description>
<Type>%Float</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="YandexPlacemarkPreset">
<Type>%String</Type>
<InitialExpression>"islands#blackIcon"</InitialExpression>
</Property>

<Property name="IsPublic">
<Description>
Is public training or not (shows in calendar)</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="RecalcYandexPresets">
<Description>
do ##class(Stc.Data.Course).RecalcYandexPresets()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set presets = $LB("islands#redIcon",
                 "islands#greenIcon",
                 "islands#blueIcon", 
                 "islands#orangeIcon", 
                 "islands#yellowIcon",
                 "islands#brownIcon",
                 "islands#oliveIcon",
                 "islands#violetIcon",
                 "islands#pinkIcon",
                 "islands#grayIcon",        
                 "islands#lightBlueIcon",
                 "islands#blackIcon")
        
    set presetsCount = $LL(presets)
                 
    &sql(DECLARE CourseCur CURSOR FOR 
         SELECT Course, Count(Course) As CourseCount
         FROM Stc_Data.Training
         GROUP BY Course
         ORDER BY CourseCount DESC) 
    
    &sql(OPEN CourseCur)
    for  
    {   
        &sql(FETCH CourseCur INTO :courseId, :count) 
        quit:(SQLCODE '= 0)
        
        if (%ROWCOUNT > presetsCount)
        {
            set newPreset = $LIST(presets, presetsCount)
        }
        else
        {
            set newPreset = $LIST(presets, %ROWCOUNT) 
        }
        
        //w !, ":newPreset="_newPreset
        &sql(UPDATE Stc_Data.Course 
             SET YandexPlacemarkPreset = :newPreset 
             WHERE ID = :courseId AND (YandexPlacemarkPreset IS NULL OR YandexPlacemarkPreset <> :newPreset))
    }
    
    &sql(CLOSE CourseCur)
        
    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateOld">
<Description>
do ##class(Stc.Data.Course).UpdateOld()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
                
        &sql(DECLARE Course1Cur CURSOR FOR 
             SELECT ID
             FROM Stc_Data.Course)  
        
        &sql(OPEN Course1Cur)
        for  
        {   
            &sql(FETCH Course1Cur INTO :id) 
            quit:(SQLCODE '= 0)

            set course = ..%OpenId(id)
            set course.Description = ##class(Stc.Data.Localization.LText).Create("")
            do course.Description.SetValues(course.Name.%Id())
            $$$THROWONERROR(st, course.%Save())
        }
        
        &sql(CLOSE Course1Cur)
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<FormalSpec>shortInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set proxy.id = ..%Id()
    set proxy.name = ..Name.Value
    set proxy.description = ..Description.Value
    set proxy.isPublic = ..IsPublic
    
    if (shortInfo = 1) quit proxy
    
    set proxy.days = ..Days
    set proxy.hours = ..Hours
    set proxy.programUrl = ..ProgramUrl
    set proxy.isInUse = ..IsInUse
    set proxy.price = ..Price
    set proxy.hourPayout = ..HourPayout
    set proxy.difCoef = ..DifficultyCoefficient
    set proxy.currency = ..Currency.ConvertToProxyObject()
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified course</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Course</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", "ID="_data.id_"; Name="_$ZCONVERT(data.name, "I","UTF8"))
    
    if (data.id = ""){
        set course = ..%New()
        set course.Name = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.name, "I","UTF8"))
        set course.Description = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.description, "I","UTF8"))
    }
    else{
        set course = ..%OpenId(data.id)
        set course.Name.Value = $ZCONVERT(data.name, "I","UTF8")
        set course.Description.Value = $ZCONVERT(data.description, "I","UTF8")
    }
    
    set course.IsPublic = data.isPublic = $$$YES
    set course.Hours = $ZCONVERT(data.hours, "I","UTF8")
    set course.Days = $ZCONVERT(data.days, "I","UTF8")
    set course.ProgramUrl = $REPLACE($REPLACE($ZCONVERT(data.programUrl, "I","UTF8"),"http://",""), "https://","")
    set course.Price = data.price
    set course.HourPayout = data.hourPayout
    set course.DifficultyCoefficient = data.difCoef
    set course.Currency = ##class(Stc.Data.Currency).%OpenId(data.currency.id)
    
    set status = course.%Save()
    do ##class(Stc.Data.Course).RecalcYandexPresets()
    quit course
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CourseD</DataLocation>
<DefaultData>CourseDefaultData</DefaultData>
<IdLocation>^Stc.Data.CourseD</IdLocation>
<IndexLocation>^Stc.Data.CourseI</IndexLocation>
<StreamLocation>^Stc.Data.CourseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CourseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Hours</Value>
</Value>
<Value name="4">
<Value>Days</Value>
</Value>
<Value name="5">
<Value>ProgramUrl</Value>
</Value>
<Value name="6">
<Value>IsInUse</Value>
</Value>
<Value name="7">
<Value>Price</Value>
</Value>
<Value name="8">
<Value>Currency</Value>
</Value>
<Value name="9">
<Value>YandexPlacemarkPreset</Value>
</Value>
<Value name="10">
<Value>Description</Value>
</Value>
<Value name="11">
<Value>Payout</Value>
</Value>
<Value name="12">
<Value>HourPayout</Value>
</Value>
<Value name="13">
<Value>DifficultyCoefficient</Value>
</Value>
<Value name="14">
<Value>IsPublic</Value>
</Value>
</Data>
<Data name="Teachers">
<Attribute>Teachers</Attribute>
<Structure>subnode</Structure>
<Subscript>"Teachers"</Subscript>
</Data>
</Storage>
</Class>
</Export>
