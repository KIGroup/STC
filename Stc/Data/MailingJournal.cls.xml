<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Data.MailingJournal">
<Super>%Persistent</Super>
<TimeCreated>63399,51994.978925</TimeCreated>

<Property name="SendedTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="CreatedTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="IsSended">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="RecipientEmail">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="RecipientName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Subject">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Message">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="9000"/>
</Property>

<Property name="Type">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="GroupNumber">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="IsSendedIdx">
<Properties>IsSended</Properties>
</Index>

<Index name="GroupNumberIndex">
<Properties>GroupNumber</Properties>
</Index>

<Method name="GetValidGroupNumber">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set nextNum = $GET(^Stc.Data.MailingJournal.GroupNumber, 1) + 1
	set ^Stc.Data.MailingJournal.GroupNumber = nextNum
	quit nextNum
]]></Implementation>
</Method>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,recipientName:%String,subject:%String,message:%Text,type:%String="",grNumber:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set obj = ..%New()
		
		set obj.Type = type
		set obj.GroupNumber = grNumber
		set obj.CreatedTS = $ZDT($ZTS, 3)		
		set obj.IsSended = $$$NO
		set obj.Subject = subject
		set obj.Message = message
		set obj.RecipientEmail = email
		set obj.RecipientName = recipientName
		
		if (obj.RecipientName = ""){
			&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.Person WHERE Email = :email)
			
			if (obj.RecipientName = ""){
				&sql(SELECT LastName || ' ' || FirstName INTO :obj.RecipientName FROM Stc_Data.Order WHERE Email = :email)	
				
				if (obj.RecipientName = ""){
					&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.MailingItemApprovedSubscriber WHERE Email = :email)	
			
					if (obj.RecipientName = ""){
						&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.MailingItemDirty WHERE Email = :email)	
					}
				}
			}
		}
		
		do obj.%Save()
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("MailingJournal Catch block", $SYSTEM.Status.GetErrorText(st))
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>contacts:%ListOfObjects,subject:%String,message:%Text,type:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set grNumber = ..GetValidGroupNumber()
	for i=1:1:contacts.Count(){
		set contact = contacts.GetAt(i)
		do ..Create(contact.email, contact.name, subject, message, type, grNumber) 
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.isSended = ..IsSended
	set proxy.sendedTS = ..SendedTS
	set proxy.subject = ..Subject
	set proxy.message = ..Message
	set proxy.type = ..Type
	
	set proxy.recipient = ##class(%ZEN.proxyObject).%New()
	set proxy.recipient.name = ..RecipientName
	set proxy.recipient.email = ..RecipientEmail
	
	quit proxy
]]></Implementation>
</Method>

<Method name="StartSending">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		&sql(DECLARE MailCur CURSOR FOR 
			 	 SELECT ID 
			 	 FROM Stc_Data.MailingJournal
			 	 WHERE IsSended = 0
			 	 ORDER BY ID)	
			
		&sql(OPEN MailCur)
		for  
		{	
			&sql(FETCH MailCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			if (##class(Stc.Data.Settings).GetMailingStatus() = "Off") {
				do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending()", "MailingStatus is Off")
				return st
			}
			
			set mail = ..%OpenId(id, 4, .st)
			if $$$ISOK(st) && (mail.IsSended = $$$NO){
				set st = ##class(Stc.Utils.Email).Send(mail.RecipientEmail, mail.Subject, mail.Message)		
				if $$$ISOK(st){
					set mail.IsSended = $$$YES
					set mail.SendedTS = $ZDT($ZTS, 3)
					do mail.%Save()
				}
				else{
					do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending()", "MailId="_id_"; St="_$System.Status.GetErrorText(st))
				}
			}
			
			kill mail
		}
			
		&sql(CLOSE MailCur)
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending() catch", $System.Status.GetErrorText(st))
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingJournalD</DataLocation>
<DefaultData>MailingJournalDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingJournalD</IdLocation>
<IndexLocation>^Stc.Data.MailingJournalI</IndexLocation>
<StreamLocation>^Stc.Data.MailingJournalS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingJournalDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedTS</Value>
</Value>
<Value name="3">
<Value>RecipientEmail</Value>
</Value>
<Value name="4">
<Value>RecipientName</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
<Value name="6">
<Value>Message</Value>
</Value>
<Value name="7">
<Value>SendedTS</Value>
</Value>
<Value name="8">
<Value>IsSended</Value>
</Value>
<Value name="9">
<Value>Type</Value>
</Value>
<Value name="10">
<Value>GeroupNumber</Value>
</Value>
<Value name="11">
<Value>GroupNumber</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
