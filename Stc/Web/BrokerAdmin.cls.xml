<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Web.BrokerAdmin">
<Description>
Private request processor for administrator</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63098,81405.67207</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
	<!-- ==================================== COURSES ==================================== -->
	
	<!-- Get full info about all courses -->
	<Route Method="POST" Url="/json/allCoursesFullInfo" Call="Stc.Web.JsonAdmin:GetCoursesFullInfo"/>
	
	<!-- Save or create course -->
	<Route Method="POST" Url="/json/saveCourse" Call="Stc.Web.JsonAdmin:SaveCourse"/>
	
	<!-- Get course -->
	<Route Method="GET" Url="/json/getCourse/:id" Call="Stc.Web.JsonAdmin:GetCourse"/>	
	
	<!-- Mark/unmark course as unused -->
	<Route Method="POST" Url="/json/changeIsInUseCourse" Call="Stc.Web.JsonAdmin:ChangeIsInUseCourse"/>	
	
	
	<!-- ==================================== APPLICATION ==================================== -->

	<!-- Get all applications (or by status) -->
	<Route Method="POST" Url="/json/orders" Call="Stc.Web.JsonAdmin:GetOrders"/>
	
	<!-- Get all applications - from students for given training -->
	<Route Method="POST" Url="/json/ordersNewStudent" Call="Stc.Web.JsonAdmin:GetOrdersNewStudent"/>
	
	
	<!-- Get not approved application by id -->
	<Route Method="GET" Url="/json/dirtyOrder/:id" Call="Stc.Web.JsonAdmin:GetDirtyOrder"/>
	
	<!-- Get application from student by id -->
	<Route Method="GET" Url="/json/orderNewStudent/:id" Call="Stc.Web.JsonAdmin:GetOrderNewStudent"/>
	
	
	<!-- Create approved application -->
	<Route Method="POST" Url="/json/createApprovedOrder" Call="Stc.Web.JsonAdmin:CreateApprovedOrder"/>
	
	<!-- Create all students from given applications -->
	<Route Method="GET" Url="/json/getStudentsFromOrders/:orderIdString" Call="Stc.Web.JsonAdmin:GetStudentsFromOrders"/>	
	
	<!-- Delete application by id -->
	<Route Method="DELETE" Url="/json/deleteOrder/:id" Call="Stc.Web.JsonAdmin:DeleteOrder"/>
	
	<!-- Delete application from student by id -->
	<Route Method="DELETE" Url="/json/deleteOrderNewStudent/:id" Call="Stc.Web.JsonAdmin:DeleteOrderNewStudent"/>
	
	
	<!-- Change organization in application -->
	<Route Method="POST" Url="/json/changeOrderCompany" Call="Stc.Web.JsonAdmin:ChangeOrderCompany"/>
	
	<!-- Change organization in application from student-->
	<Route Method="POST" Url="/json/changeOrderNewStudentCompany" Call="Stc.Web.JsonAdmin:ChangeOrderNewStudentCompany"/>
	
	
	<!-- Resend email with instructions to organization's contact person -->
	<Route Method="POST" Url="/json/sendEmailToCompanyContactForApprovedOrder" Call="Stc.Web.JsonAdmin:SendEmailToCompanyContactForApprovedOrder"/>
	
	<!-- ==================================== ORGANIZATIONS ==================================== -->
	
	<!-- Get organization by id -->
	<Route Method="GET" Url="/json/company/:id" Call="Stc.Web.JsonAdmin:GetCompany"/>	
	
	<!-- Save organization from application -->
	<Route Method="POST" Url="/json/saveCompanyFromOrder" Call="Stc.Web.JsonAdmin:SaveCompanyFromOrder"/>
	
	<!-- Save organization and contact person from application from student -->
	<Route Method="POST" Url="/json/saveCompanyFromOrderNewStudent" Call="Stc.Web.JsonAdmin:SaveCompanyFromOrderNewStudent"/>
	
	
	<!-- Save new organization data -->
	<Route Method="POST" Url="/json/saveCompany" Call="Stc.Web.JsonAdmin:SaveCompany"/>
	
	<!-- Change contact person of organization -->
	<Route Method="POST" Url="/json/changeCompanyContact" Call="Stc.Web.JsonAdmin:ChangeCompanyContact"/>
	
	<!-- Get all organizations for table, full info -->
	<Route Method="POST" Url="/json/allCompaniesFullInfo" Call="Stc.Web.JsonAdmin:GetCompaniesFullInfo"/>
	
	<!-- Delete organization if it is available -->
	<Route Method="DELETE" Url="/json/company/:id" Call="Stc.Web.JsonAdmin:DeleteCompany"/>


	<!-- ==================================== TRAININGS ==================================== -->
	<!-- Working with event in Google Calendar - create, update, delete -->
	<Route Method="POST" Url="/json/trainingEvent" Call="Stc.Web.JsonAdmin:TrainingCalendarEvent"/>
	
	<!-- Create training from selected applications, create/update subgroups -->
	<Route Method="POST" Url="/json/saveTraining" Call="Stc.Web.JsonAdmin:SaveTraining"/>	
	
	<!-- Delete training -->
	<Route Method="DELETE" Url="/json/deleteTraining/:id" Call="Stc.Web.JsonAdmin:DeleteTraining"/>	
	
	<!-- Complete training and create certificates for each student -->
	<Route Method="POST" Url="/json/completeTraining" Call="Stc.Web.JsonAdmin:CompleteTraining"/>	
	
	<!-- Add subgroups, based on selected application to training -->
	<Route Method="POST" Url="/json/createSubGroupsForTraining" Call="Stc.Web.JsonAdmin:CreateSubGroupsForTraining"/>	
	
	<!-- Get all trainings for table -->
	<Route Method="POST" Url="/json/allTrainings" Call="Stc.Web.JsonAdmin:GetTrainings"/>	
	
	<!-- Get training by id -->
	<Route Method="GET" Url="/json/getTraining/:id" Call="Stc.Web.JsonAdmin:GetTraining"/>	
	
	<!-- Get subgroups of training -->
	<Route Method="POST" Url="/json/getTrainingSubGroups" Call="Stc.Web.JsonAdmin:GetTrainingSubGroups"/>	
	
	<!-- Get students of trainings -->
	<Route Method="POST" Url="/json/getTrainingStudents" Call="Stc.Web.JsonAdmin:GetTrainingStudents"/>	

	<!-- Get feed Backs of trainings -->
	<Route Method="POST" Url="/json/getFeedBacks" Call="Stc.Web.JsonAdmin:GetTrainingFeedBacks"/>	
	
	<!-- Delete feedback from training -->
	<Route Method="DELETE" Url="/json/deleteFeedBack/:id" Call="Stc.Web.JsonAdmin:DeleteFeedBack"/>	
	
	<!-- Add subgroup into training -->
	<Route Method="POST" Url="/json/createSubGroup" Call="Stc.Web.JsonAdmin:CreateSubGroup"/>	
	
	<!-- Add person from application into training, create/open subgroup and add person -->
	<Route Method="POST" Url="/json/addNewStudentIntoTraining" Call="Stc.Web.JsonAdmin:AddNewStudentIntoTraining"/>	
	
	<!-- Delete subgroup from training -->
	<Route Method="DELETE" Url="/json/deleteSubGroup/:trainingIdsgroupId" Call="Stc.Web.JsonAdmin:DeleteSubGroup"/>	
	
	<!-- Save pay of subgroup -->
	<Route Method="POST" Url="/json/saveSubGroupPayment" Call="Stc.Web.JsonAdmin:SaveSubGroupPayment"/>
	
	<!-- Save contract of subgroup -->
	<Route Method="POST" Url="/json/saveSubGroupContract" Call="Stc.Web.JsonAdmin:SaveSubGroupContract"/>

	<!-- All currencies -->
	<Route Method="GET" Url="/json/allCurrencies" Call="Stc.Web.JsonAdmin:GetAllCurrencies"/>
	
	<!-- All certificates of training -->
	<Route Method="POST" Url="/json/training/getCertificates" Call="Stc.Web.JsonAdmin:GetTrainingCertificates"/>
	
	<!-- Create all certificates for training -->
	<Route Method="POST" Url="/json/training/createCertificates" Call="Stc.Web.JsonAdmin:CreateTrainingCertificates"/>

	<!-- All email's of students of training -->
	<Route Method="GET" Url="/json/trainingStudentsEmails/:trainingId" Call="Stc.Web.JsonAdmin:GetTrainingStudentsEmails"/>
	
	<!-- Send email from training (to students or teacher or curator or feedback) -->
	<Route Method="POST" Url="/json/training/sendEmail" Call="Stc.Web.JsonAdmin:SendEmailFromTraining"/>
	
	
	<!-- Change automail status for teacher -->
	<Route Method="POST" Url="/json/changeTrainingStatusAutoMailing" Call="Stc.Web.JsonAdmin:ChangeTrainingStatusAutoMailing"/>
	
	
	<!-- Get email pattern from CacheMsg -->
	<Route Method="GET" Url="/json/mailPattern/:type" Call="Stc.Web.JsonAdmin:GetTrainingEmailPattern"/>
	
	
	
	<!-- ==================================== CERTIFICATES ================================ -->
	
	<!-- Get all certificates for table -->
	<Route Method="POST" Url="/json/certificates" Call="Stc.Web.JsonAdmin:GetCertificates"/>

	<!-- Print certificate -->
	<Route Method="POST" Url="/json/printCertificate/:number" Call="Stc.Web.JsonAdmin:PrintCertificate"/>	
	
	<!-- Delete certificate -->
	<Route Method="DELETE" Url="/json/certificate/:number" Call="Stc.Web.JsonAdmin:DeleteCertificate"/>	
	
	
	<!-- ==================================== PERSONS ==================================== -->
	
	<!-- Save/create person -->
	<Route Method="POST" Url="/json/createPerson" Call="Stc.Web.JsonAdmin:SavePerson"/>
	
	<!-- Delete person  -->
	<Route Method="DELETE" Url="/json/deletePerson/:id" Call="Stc.Web.JsonAdmin:DeletePerson"/>
	
	<!-- All application with person -->
	<Route Method="GET" Url="/json/personOrders/:id" Call="Stc.Web.JsonAdmin:GetPersonOrders"/>
	
	<!-- All trainings with person -->
	<Route Method="GET" Url="/json/personTrainings/:id" Call="Stc.Web.JsonAdmin:GetPersonTrainings"/>
	
	<!-- All certificates of person -->
	<Route Method="GET" Url="/json/personCertificates/:id" Call="Stc.Web.JsonAdmin:GetPersonCertificates"/>
	
	<!-- All courses, where person is teacher -->
	<Route Method="GET" Url="/json/personCourses/:id" Call="Stc.Web.JsonAdmin:GetPersonCourses"/>
	
	<!-- All organizations, where person is contact person -->
	<Route Method="GET" Url="/json/personCompanies/:id" Call="Stc.Web.JsonAdmin:GetPersonCompanies"/>

	<!-- All students, search by last name and email -->
	<Route Method="GET" Url="/json/personByLastNameOrEmailStartsWith/:word" Call="Stc.Web.JsonAdmin:GetPersonByLastNameOrEmailStartsWith"/>
				
	<!-- Search teachers, that don't teach selected course -->
	<Route Method="GET" Url="/json/getFreeTeachers/:courseword" Call="Stc.Web.JsonAdmin:GetFreeTeachers"/>
	
	<!-- Search persons, that not in subgroup of trainings -->
	<Route Method="GET" Url="/json/getFreeStudents/:sgroupword" Call="Stc.Web.JsonAdmin:GetFreeStudents"/>
	
	<!-- Search persons, that not in training -->
	<Route Method="GET" Url="/json/getFreeTrainingStudents/:trainingword" Call="Stc.Web.JsonAdmin:GetFreeTrainingStudents"/>
	
	<!-- Get person by id -->
	<Route Method="GET" Url="/json/getPerson/:id" Call="Stc.Web.JsonAdmin:GetPerson"/>

	<!-- Get person by Email -->
	<Route Method="GET" Url="/json/getPersonByEmail/:email" Call="Stc.Web.JsonAdmin:GetPersonByEmail"/>


	<!-- Get all persons for table -->
	<Route Method="POST" Url="/json/allPersons" Call="Stc.Web.JsonAdmin:GetAllPersons"/>

	<!-- Refresh person's data -->
	<Route Method="POST" Url="/json/updatePerson" Call="Stc.Web.JsonAdmin:SavePerson"/>

	<!-- Get all teachers of course -->
	<Route Method="GET" Url="/json/getCourseTeachers/:courseId" Call="Stc.Web.JsonAdmin:GetCourseTeachers"/>
	
	<!-- Create / add student into subgroup of training -->
	<Route Method="POST" Url="/json/createSubGroupStudent" Call="Stc.Web.JsonAdmin:CreateSubGroupStudent"/>

	<!-- Assign teacher to course -->
	<Route Method="POST" Url="/json/createCourseTeacher" Call="Stc.Web.JsonAdmin:CreateCourseTeacher"/>

	<!-- Delete teacher and course link -->
	<Route Method="DELETE" Url="/json/deleteCourseTeacher/:courseIdTeacherId" Call="Stc.Web.JsonAdmin:DeleteCourseTeacher"/>
	
	<!--  -->
	<Route Method="DELETE" Url="/json/deleteSubGroupStudent/:sgroupIdstudentId" Call="Stc.Web.JsonAdmin:DeleteSubGroupStudent"/>
	
	<!--  -->
	<Route Method="DELETE" Url="/json/deleteTrainingStudent/:trainingIdstudentId" Call="Stc.Web.JsonAdmin:DeleteTrainingStudent"/>
	
	<!-- ==================================== SETTINGS ==================================== -->
	<!-- Get settings for google api from globals -->
	<Route Method="GET" Url="/json/settings/google/:type" Call="Stc.Web.JsonAdmin:GetGoogleSettings"/>
	
	<!-- Save settings for google api from client -->
	<Route Method="POST" Url="/json/settings/google/:type" Call="Stc.Web.JsonAdmin:SaveGoogleSettings"/>
	
	
	<!-- Get settings for mail from globals -->
	<Route Method="GET" Url="/json/settings/mail/:type" Call="Stc.Web.JsonAdmin:GetMailSettings"/>
	
	<!-- Save settings for mail from client -->
	<Route Method="GET" Url="/json/settings/mail/:type" Call="Stc.Web.JsonAdmin:SaveMailSettings"/>
	
	<!-- ==================================== OTHER ==================================== -->
	
	<!-- Check access, authorization call, if needed -->
	<Route Method="GET" Url="/json/checkAdmin/:isLogin" Call="Stc.Web.JsonAdmin:CheckAdmin"/>
		
	<!-- Report, certificates of training -->
	<Route Method="GET" Url="/text/:lang/certificates/:trainingId" Call="Stc.Web.Report:Certificates"/>
</Routes>
]]></Data>
</XData>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "en":"en", :"ru")
	do ##class(%MessageDictionary).SetSessionLanguage(lang)
	set %session.Language = lang
	
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
  
    Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
