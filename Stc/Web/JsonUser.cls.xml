<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Web.JsonUser">
<Description>
Handling of BrokerUser</Description>
<Super>Json</Super>
<TimeCreated>63098,81469.21022</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ==================================== COURSES ==================================== 

]]></Content>
</UDLText>

<Method name="GetCoursesShortInfo">
<Description>
Get short info about all courses</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isInUse:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set isInUseCondition = ""
	if (isInUse = 1) || (isInUse = 0) set isInUseCondition = "WHERE IsInUse = "_isInUse
	
	set sql = "SELECT ID As id, Name->Value as name, IsInUse As isInUse FROM Stc_Data.Course "_isInUseCondition_" ORDER BY name"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetCoursesFullInfo">
<Description>
Get full info about all courses</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Course", "Stc.Data.Course", params, "IsInUse = "_..ParseParameter(params.isInUse)))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== APPLICATIONS ==================================== 

]]></Content>
</UDLText>

<Method name="CreateOrder">
<Description>
Create application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
    try{
	    TSTART
	    
	   	$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.order,1))
       
       	set order = ##class(Stc.Data.OrderDirty).Create(order, .status)
       	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createDirtyOrder", "| "_status))
       	/*
       	#dim order As Stc.Data.OrderDirty
       	set subject = "STC. Новая заявка на обучение от организации - """_order.CompanyString_""""
       	set msg = "Курс: "_order.Course.Name.Value_"<br>"_
       	          "Контактное лицо: "_order.LastName.Value_" "_order.FirstName.Value_" "_order.MiddleName.Value_", "_order.Email_", "_order.Phone_"<br>"_
       	          "Организация: """_order.CompanyString_"""<br>"_
       	          "Количество слушателей: "_order.StudentsNumber_"<br>"_
       	          "Заявка создана: "_order.CreatedTS_"<br>"_
       	          "<a href='http://"_$GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp#/orders' target='_blank'>Страница заявок</a>"
     
     	do ##class(Stc.Web.JsonAdmin).SendEmailToOperators(subject, msg)
     	*/ 	
       	TCOMMIT
   	}
   	catch ex {
	   	TROLLBACK
	   	set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="CreateOrderNewStudent">
<Description>
Create application for student</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
    try{
	    TSTART
	    
	   	$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.order,1))
       
       	set order = ##class(Stc.Data.OrderNewStudent).Create(order, .status)
       	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createDirtyOrder", "| "_status))
       	/*
       	#dim order As Stc.Data.OrderNewStudent
       	set subject = "STC. Новая заявка на присоединение к курсу от слушателя - """_order.LastName.Value_""""
       	set msg = "Город: "_order.Training.City.Name.Value_"<br>"_
       			  "Курс: "_order.Training.Course.Name.Value_"<br>"_
       			  "Дата начала: "_$ZD(order.Training.DateStart, 3)_"<br><br>"_
       			  "Слушатель: "_order.LastName.Value_" "_order.FirstName.Value_" "_order.MiddleName.Value_", "_order.Email_", "_order.Phone_"<br>"_
       	          "Организация: """_order.CompanyString_"""<br>"_
       	          "Заявка создана: "_order.CreatedTS_"<br>"_
       	          "<a href='http://"_$GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp#/training?id="_order.Training.%Id()_"' target='_blank'>Страница обучения</a>"
     
     	do ##class(Stc.Web.JsonAdmin).SendEmailToOperators(subject, msg)
     	*/
       	TCOMMIT
   	}
   	catch ex {
	   	TROLLBACK
	   	set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetApprovedOrderInfo">
<Description>
Get application by access code</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(code,,.status)
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode", "| "_status))
		
		set proxy = order.ConvertToProxyObject()
		set proxy.code = code
		set proxy.contact.company = order.Company.ConvertToProxyObject()
		do proxy.%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
   quit status
]]></Implementation>
</Method>

<Method name="FinishEditingOrder">
<Description>
Finish editing of application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
	
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(data.code,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode"))
		
		set order.OrderStatus = ##class(Stc.Data.OrderStatus).CodeIdxOpen("Completed")
		set order.AccessCode = $SYSTEM.Util.CreateGUID()
		
		set status = order.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveApprovedOrder", "| "_status))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== ORGANIZATIONS ==================================== 

]]></Content>
</UDLText>

<Method name="GetCompaniesShortInfo">
<Description>
Get short info about all organization</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, ShortName->Value as name FROM Stc_Data.Company ORDER BY name")
]]></Implementation>
</Method>

<Method name="GetCompaniesShortInfoForTraining">
<Description>
Get short info about all organization for training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set id = ..ParseParameter(id)
	set sql =  "SELECT id, name "_
			   "FROM( "_
                    "SELECT SubGroups->Payer as id, SubGroups->Payer->ShortName->Value As name "_
                    "FROM Stc_Data.Training_SubGroups "_
                    "WHERE Training = '"_id_"' "_
					"UNION "_
					"SELECT Company As id, Company->ShortName->Value As name "_
					"FROM Stc_Data.OrderNewStudent "_
					"WHERE Training = '"_id_"' AND Company IS NOT NULL "_
				") "_
				"ORDER BY name"
				
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="SaveCompany">
<Description>
Save organization</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
	
		if (##class(Stc.Data.OrderApproved).AccessCodeIdxExists(data.order.code) = 0){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode"))
		}
		
		do ##class(Stc.Data.Company).Save(data.company, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany"))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== PERSONS ==================================== 

]]></Content>
</UDLText>

<Method name="GetApprovedOrderStudents">
<Description>
Get students of approved application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
		
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(params.code,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode"))
		
		$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT Students FROM Stc_Data.OrderApproved_Students", "Stc.Data.Person", params, "OrderApproved = "_order.%Id()))
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="GetOrderStudent">
<Description>
Get application by student</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(data.order.code,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode"))
		
		set student = order.Students.GetAt(data.student.id)
		set proxy = student.ConvertToProxyObject()
		do proxy.%ToJSON()
 	}
	catch ex {
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="SaveOrderStudent">
<Description>
Create student for application. If email exist link student with application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set result = ##class(%ZEN.proxyObject).%New()
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(data.order.code,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("wrongOrderAccessCode"))
		
		set student = order.Students.GetAt(data.student.id)
		
		if (student){
			// Редактирование
			if (##class(Stc.Data.Person).IsEditable(data.student.id)){
				do ##class(Stc.Data.Person).Save(data.student, .status)
				if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveOrderStudent", " | "_status))
				
				set result.result = 1
			}
			else{
				$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("doNotHaveAccessToEditOrderStudent"))	
			}
		}
		elseif (##class(Stc.Data.Person).EmailIdxExists(data.student.email) = 0){
			// Создание
			set student = ##class(Stc.Data.Person).Save(data.student, .status)
			if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createOrderStudent", " | "_status))
			
			do order.Students.SetAt(student, student.%Id())
			set result.result = 2
		}
		else{
			// Добавление уже существующего
			set student = ##class(Stc.Data.Person).EmailIdxOpen(data.student.email)
			do order.Students.SetAt(student, student.%Id())
			set result.result = 3
		}
		
		
		set status = order.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveApprovedOrder", " | "_status))
		
		do result.%ToJSON()	
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="DeleteOrderStudent">
<Description>
Delete student from application (and from database, if possible)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set order = ##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(data.order.code, , .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openOrder"))
		
		do order.Students.RemoveAt(data.student.id)
		
		if (##class(Stc.Data.Person).IsEditable(data.student.id)) set status = ##class(Stc.Data.Person).Delete(data.student.id)
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deletePerson"))
		
		$$$THROWONERROR(status, order.%Save())
	
		TCOMMIT
 	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== OTHER ==================================== 

]]></Content>
</UDLText>

<Method name="GetCitiesStartsWith">
<Description>
Search cities</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $L(word) < 2 quit $$$OK
	
	set proxyItems = ##class(%ListOfObjects).%New()	
	set lang = $$$SessionLanguage
	set word = word_"%"
	
	&sql(DECLARE RegionCurr CURSOR FOR 
		 	 SELECT TOP 500 reg.ID As id, ltV.Value As name, reg.ParentRegion->Name->Value as parentName, reg.ParentRegion->ParentRegion->Name->Value
		 	 FROM Stc_Data_Localization.LTextValue as ltV
		 	 INNER JOIN 
		 	 Stc_Data.Region as reg ON reg.Name = ltV.LText
			 WHERE reg.HLevel = 2 AND ltV.Lang = :lang AND ltV.Value LIKE :word
			 ORDER BY name, parentName)	
		
	&sql(OPEN RegionCurr)
	for  
	{	
		&sql(FETCH RegionCurr INTO :id, :name, :parent, :greatParent) 
		quit:(SQLCODE '= 0)
		set proxyItem = ##class(%ZEN.proxyObject).%New()
		set proxyItem.id = id
		set proxyItem.name = name
		set proxyItem.parentName = parent
		set proxyItem.greatParentName = greatParent
		do proxyItems.Insert(proxyItem)
	}
		
	&sql(CLOSE RegionCurr)
	
	set proxyResult = ##class(%ZEN.proxyObject).%New()
	set proxyResult.children = proxyItems
	do proxyResult.%ToJSON()
	    
	q $$$OK
]]></Implementation>
</Method>

<Method name="GetTraining">
<Description>
Get training by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		set proxy = ..GetProxyObject("Stc.Data.Training", id)
		set proxy.accessCode = ""
		set proxy.teacher.phone = ""
		set proxy.teacher.skype = ""
		set proxy.teacher.company = ""
		set proxy.curator.phoneSecret = ""
		set proxy.cost = ""
		set proxy.dateGoogleCalendar = $REPLACE(proxy.dateStart_"/"_$ZD($ZDH(proxy.dateFinish,3)+1, 3), "-", "")
			
		&sql(SELECT ProgramUrl INTO :proxy.course.programUrl FROM Stc_Data.Course WHERE ID = :proxy.course.id)
		
		do proxy.%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetTrainingStudents">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training->AccessCode = '"_..ParseParameter(params.accessCode)_"')"
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT Students FROM Stc_Data.SubGroup_Students", "Stc.Data.Person", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveFeedBack">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set training = ##class(Stc.Data.Training).%OpenId(data.access.id)
      	if ($P(training.AccessCode,"-",1)_"-"_$P(training.AccessCode,"-",5) '= data.access.code){
      		$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackErrorCode"))
      	}
      	
      	if (training.FeedBacks.Count() > 50){
	      	$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSpam"))
      	}
      	
      	set fb = ##class(Stc.Data.FeedBack).%New()
      	set fb.Author = $ZCONVERT(data.author, "I","UTF8")
      	set fb.Training = training
      	set fb.Rating = data.rating
      	set fb.WhatLiked = $ZCONVERT(data.whatLiked, "I","UTF8")
      	set fb.WhatImprovements = $ZCONVERT(data.whatImprovements, "I","UTF8")
      	set fb.WhatHear = $ZCONVERT(data.whatHear, "I","UTF8")
      	set fb.AboutTeacher = $ZCONVERT(data.aboutTeacher, "I","UTF8")
      	set status = fb.%Save()
      	if ($$$ISERR(status)) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSave")) 
      	
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetSchedule">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.courses = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE ScheduleCourseCur CURSOR FOR 
		 	 SELECT ID, 
		 	 ISNULL((SELECT MIN(DateStart)FROM Stc_Data.Training WHERE Course = course.ID AND IsCompleted = 0),'11/11/2099') As MinTrainingDate,
		 	 (SELECT COUNT(ID)FROM Stc_Data.Training WHERE Course = course.ID) As TotalCount
		 	 FROM Stc_Data.Course as course
			 WHERE IsInUse = 1
			 ORDER BY MinTrainingDate, TotalCount DESC)	
		
	&sql(OPEN ScheduleCourseCur)
	for  
	{	
		&sql(FETCH ScheduleCourseCur INTO :courseId, :minTrainingDate, :totalCount) 
		quit:(SQLCODE '= 0)
		
		set course = ##class(Stc.Data.Course).%OpenId(courseId).ConvertToProxyObject()
		set course.trainings = ##class(%ListOfObjects).%New()
		
		// Course trainings	
		&sql(DECLARE ScheduleTrainingCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Stc_Data.Training 
		 	 WHERE Course = :courseId AND IsCompleted = 0
		 	 ORDER BY DateStart)
		
		&sql(OPEN ScheduleTrainingCur)
		for  
		{	
			&sql(FETCH ScheduleTrainingCur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			set trObj = ##class(Stc.Data.Training).%OpenId(trId)
			set trProxy = ##class(%ZEN.proxyObject).%New()
			set trProxy.id = trId
			set trProxy.city = trObj.City.ConvertToProxyObject()
			set trProxy.dateStart = $ZD(trObj.DateStart, 3)
			set trProxy.dateFinish = $ZD(trObj.DateFinish, 3)
			set trProxy.dateGoogleCalendar = $REPLACE($ZD(trObj.DateStart, 3)_"/"_$ZD(trObj.DateFinish+1, 3), "-", "")
			
			set trProxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(trObj.TimeStart), 1, 5)
			set trProxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(trObj.TimeFinish), 1, 5) 
			set trProxy.street = trObj.Street.Value
			set trProxy.room = trObj.Room
			set trProxy.otherInfo = trObj.OtherInfo.Value
			set trProxy.teacherFullName = trObj.Teacher.FullName
			set trProxy.teacherEmail = trObj.Teacher.Email
			set trProxy.curatorFullName = trObj.CuratorFullName.Value
			set trProxy.curatorPhone = trObj.CuratorPhone
			set trProxy.curatorEmail = trObj.CuratorEmail
		
			do course.trainings.Insert(trProxy)	
		}
		&sql(CLOSE ScheduleTrainingCur)
		
		do proxy.courses.Insert(course)		
	}
	&sql(CLOSE ScheduleCourseCur)
	
	
	
	quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="CreateMailingSubscription">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		// Check email for exists subscription in the announcement group
		set group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup()
		set groupId = group.%Id()
		set existsApprovedId = ""
		&sql(SELECT ID INTO :existsApprovedId FROM Stc_Data.MailingItemApproved WHERE Email = :data.email AND MGroup = :groupId)
		
		if (existsApprovedId '= ""){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
		}
			
		// Check email for exists order for subscription
		set existsDirtyId = ""
		&sql(SELECT ID INTO :existsDirtyId FROM Stc_Data.MailingItemDirty WHERE Email = :data.email)
		
		// Id for update data
		set data.id = existsDirtyId
		set data.group = ##class(%ZEN.proxyObject).%New()
		set data.group.id = group.%Id()
		
		set item = ##class(Stc.Data.MailingItemDirty).Save(data, .st)
		$$$THROWONERROR(st, st)
		
		set url = "http://"_$GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp#/mailing/subscription/confirmation/"_$system.Encryption.Base64Encode(item.AccessCode)
		
		set mailSubject = ##class(Stc.Utils.Msg).GetMsg("subjectConfirmationSubscription")
		set mailMsg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgConfirmationSubscription"), url)
		
		set st = ##class(Stc.Utils.Email).Send(item.Email, mailSubject, mailMsg)
		if $$$ISERR(st){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SendSubscriptionConfirmationCodeError", "| "_st))
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="ConfirmMailingSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemDirty).AccessCodeIdxExists(code) = $$$NO){
			if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$YES){
				$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
			}
			else{ 
				$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongConfirmationCode"))
			}
		}
		
		set dirtyItem = ##class(Stc.Data.MailingItemDirty).AccessCodeIdxOpen(code)
		
		set approvedItem = ##class(Stc.Data.MailingItemApproved).%New()
		set approvedItem.FullName = dirtyItem.FullName
		set approvedItem.Email = dirtyItem.Email
		set approvedItem.Company = dirtyItem.Company
		set approvedItem.Position = dirtyItem.Position
		set approvedItem.AccessCode = dirtyItem.AccessCode
		set approvedItem.MGroup = dirtyItem.MGroup
		set approvedItem.LastUpdated = $ZDT($ZTS, 3)
		
		$$$THROWONERROR(st, approvedItem.%Save())
		
		$$$THROWONERROR(st, ##class(Stc.Data.MailingItemDirty).AccessCodeIdxDelete(code))
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteMailingSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		$$$THROWONERROR(st, ##class(Stc.Data.MailingItemApproved).AccessCodeIdxDelete(code))
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="UpdateMailingSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set oldObj = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code)
		set data.id = oldObj.%Id()
		set data.email = oldObj.Email
		set data.group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup().ConvertToProxyObject()
		kill oldObj
		
		do ##class(Stc.Data.MailingItemApproved).Save(data, .st)
		$$$THROWONERROR(st, st)
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetMailingSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		set proxy = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code).ConvertToProxyObject()
		set proxy.accessCode = ""
		set proxy.group = ""
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>
</Class>
</Export>
