<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Web.JsonUser">
<Description>
Handling of BrokerUser</Description>
<Super>Json</Super>
<TimeCreated>63098,81469.21022</TimeCreated>

<Method name="GetCoursesShortInfo">
<Description>

==========================================================================================================================
COURSE                                                                                                              COURSE
==========================================================================================================================

Get short info about all courses
Method="GET" Url="/json/course/isInUse/:isInUse"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isInUse:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set isInUseCondition = ""
	if (isInUse = 1) || (isInUse = 0) set isInUseCondition = "WHERE IsInUse = "_isInUse
	
	set sql = "SELECT ID As id, Name->Value as name, IsInUse As isInUse FROM Stc_Data.Course "_isInUseCondition_" ORDER BY name"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetCoursesFullInfoForGrid">
<Description>
Get full info about all courses
Method="POST" Url="/json/course/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Course", "Stc.Data.Course", params, "IsInUse = "_..ParseParameter(params.isInUse)))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="CreateOrderDirty">
<Description>

==========================================================================================================================
ORDER                                                                                                                ORDER
==========================================================================================================================

Create application
Method="POST" Url="/json/orderDirty"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
    try{
	    TSTART
	    
	   	$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.order,1))
       
       	set order = ##class(Stc.Data.OrderDirty).Create(order, .status)
       	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createDirtyOrder", "| "_status))
       	
       	TCOMMIT
   	}
   	catch ex {
	   	TROLLBACK
	   	set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="CreateOrderNewStudent">
<Description>
Create application for student
Method="POST" Url="/json/orderNewStudent"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
    try{
	    TSTART
	    
	   	$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.order,1))
       
       	set order = ##class(Stc.Data.OrderNewStudent).Create(order, .status)
       	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createDirtyOrder", "| "_status))
       	/*
       	#dim order As Stc.Data.OrderNewStudent
       	set subject = "STC. Новая заявка на присоединение к курсу от слушателя - """_order.LastName.Value_""""
       	set msg = "Город: "_order.Training.City.Name.Value_"<br>"_
       			  "Курс: "_order.Training.Course.Name.Value_"<br>"_
       			  "Дата начала: "_$ZD(order.Training.DateStart, 3)_"<br><br>"_
       			  "Слушатель: "_order.LastName.Value_" "_order.FirstName.Value_" "_order.MiddleName.Value_", "_order.Email_", "_order.Phone_"<br>"_
       	          "Организация: """_order.CompanyString_"""<br>"_
       	          "Заявка создана: "_order.CreatedTS_"<br>"_
       	          "<a href='http://"_$GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp#/training?id="_order.Training.%Id()_"' target='_blank'>Страница обучения</a>"
     
     	do ##class(Stc.Web.JsonAdmin).SendEmailToOperators(subject, msg)
     	*/
       	TCOMMIT
   	}
   	catch ex {
	   	TROLLBACK
	   	set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetCompaniesShortInfo">
<Description>

==========================================================================================================================
ORGANIZATION                                                                                                  ORGANIZATION
==========================================================================================================================

Get short info about all organization
Method="GET" Url="/json/company"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, ShortName->Value as name FROM Stc_Data.Company ORDER BY name")
]]></Implementation>
</Method>

<Method name="CreateMailingSubscription">
<Description>

==========================================================================================================================
MAILING SUBSCRIPTION                                                                                  MAILING SUBSCRIPTION
==========================================================================================================================

Create dirty mailing item
Method="POST" Url="/json/mailing/subscription"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		// Check email for exists subscription in the announcement group
		set group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup()
		set groupId = group.%Id()
		set existsApprovedId = ""
		&sql(SELECT ID INTO :existsApprovedId FROM Stc_Data.MailingItemApproved WHERE Email = :data.email AND MGroup = :groupId)
		
		if (existsApprovedId '= ""){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
		}
			
		// Check email for exists order for subscription
		set existsDirtyId = ""
		&sql(SELECT ID INTO :existsDirtyId FROM Stc_Data.MailingItemDirty WHERE Email = :data.email)
		
		// Id for update data
		set data.id = existsDirtyId
		set data.group = ##class(%ZEN.proxyObject).%New()
		set data.group.id = group.%Id()
		
		set item = ##class(Stc.Data.MailingItemDirty).Save(data, .st)
		$$$THROWONERROR(st, st)
		
		set url = "http://"_$GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp#/mailing/subscription/confirmation/"_$system.Encryption.Base64Encode(item.AccessCode)
		
		set mailSubject = ##class(Stc.Utils.Msg).GetMsg("subjectConfirmationSubscription")
		set mailMsg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgConfirmationSubscription"), url)
		
		set st = ##class(Stc.Utils.Email).Send(item.Email, mailSubject, mailMsg)
		if $$$ISERR(st){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SendSubscriptionConfirmationCodeError", "| "_st))
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="ConfirmMailingSubscription">
<Description>
Activate subscription, remove dirty and create approved mailing item
Method="POST" Url="/json/mailing/subscription/confirmation/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemDirty).AccessCodeIdxExists(code) = $$$NO){
			if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$YES){
				$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
			}
			else{ 
				$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongConfirmationCode"))
			}
		}
		
		set dirtyItem = ##class(Stc.Data.MailingItemDirty).AccessCodeIdxOpen(code)
		
		set approvedItem = ##class(Stc.Data.MailingItemApproved).%New()
		set approvedItem.FullName = dirtyItem.FullName
		set approvedItem.Email = dirtyItem.Email
		set approvedItem.Company = dirtyItem.Company
		set approvedItem.Position = dirtyItem.Position
		set approvedItem.AccessCode = dirtyItem.AccessCode
		set approvedItem.MGroup = dirtyItem.MGroup
		set approvedItem.LastUpdated = $ZDT($ZTS, 3)
		
		$$$THROWONERROR(st, approvedItem.%Save())
		
		$$$THROWONERROR(st, ##class(Stc.Data.MailingItemDirty).AccessCodeIdxDelete(code))
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="DeleteMailingSubscription">
<Description>
Remove approved mailing item by access code (unsubscribe)
Method="DELETE" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		$$$THROWONERROR(st, ##class(Stc.Data.MailingItemApproved).AccessCodeIdxDelete(code))
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="UpdateMailingSubscription">
<Description>
Update approved mailing item by access code
Method="POST" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set oldObj = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code)
		set data.id = oldObj.%Id()
		set data.email = oldObj.Email
		set data.group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup().ConvertToProxyObject()
		kill oldObj
		
		do ##class(Stc.Data.MailingItemApproved).Save(data, .st)
		$$$THROWONERROR(st, st)
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetMailingSubscription">
<Description>
Get approved mailing item by access code
Method="GET" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set code = $system.Encryption.Base64Decode(code)
		
		if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
			$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
		}
		
		set proxy = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code).ConvertToProxyObject()
		set proxy.accessCode = ""
		set proxy.group = ""
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCities">
<Description>

==========================================================================================================================
OTHER                                                                                                                OTHER
==========================================================================================================================

Search cities
Method="GET" Url="/json/city/:startsWith"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $L(word) < 2 quit $$$OK
	
	set proxyItems = ##class(%ListOfObjects).%New()	
	set lang = $$$SessionLanguage
	set word = word_"%"
	
	&sql(DECLARE RegionCurr CURSOR FOR 
		 	 SELECT TOP 500 reg.ID As id, ltV.Value As name, reg.ParentRegion->Name->Value as parentName, reg.ParentRegion->ParentRegion->Name->Value
		 	 FROM Stc_Data_Localization.LTextValue as ltV
		 	 INNER JOIN 
		 	 Stc_Data.Region as reg ON reg.Name = ltV.LText
			 WHERE reg.HLevel = 2 AND ltV.Lang = :lang AND ltV.Value LIKE :word
			 ORDER BY name, parentName)	
		
	&sql(OPEN RegionCurr)
	for  
	{	
		&sql(FETCH RegionCurr INTO :id, :name, :parent, :greatParent) 
		quit:(SQLCODE '= 0)
		set proxyItem = ##class(%ZEN.proxyObject).%New()
		set proxyItem.id = id
		set proxyItem.name = name
		set proxyItem.parentName = parent
		set proxyItem.greatParentName = greatParent
		do proxyItems.Insert(proxyItem)
	}
		
	&sql(CLOSE RegionCurr)
	
	set proxyResult = ##class(%ZEN.proxyObject).%New()
	set proxyResult.children = proxyItems
	do proxyResult.%ToJSON()
	    
	q $$$OK
]]></Implementation>
</Method>

<Method name="GetTraining">
<Description>
Get training by id
Method="GET" Url="/json/training/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set proxy = ##class(Stc.Data.Training).%OpenId(id).ConvertToProxyObjectForPublic()
		do proxy.%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetTrainingStudents">
<Description>
All training students for teacher view by access code
Method="POST" Url="/json/training/:code/student"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training->AccessCode = '"_..ParseParameter(accessCode)_"')"
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT Students FROM Stc_Data.SubGroup_Students", "Stc.Data.Person", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveTrainingFeedBack">
<Description>
Create feedBack for training
Method="POST" Url="/json/training/:id/feedback/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String,accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set tr = ##class(Stc.Data.Training).%OpenId(trId)
      	if ($P(tr.AccessCode,"-",1)_"-"_$P(tr.AccessCode,"-",5) '= accessCode){
      		$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackErrorCode"))
      	}
      	
      	if (tr.FeedBacks.Count() > 50){
	      	$$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSpam"))
      	}
      	
      	do ##class(Stc.Utils.Log).Create("Stc.Web.JsonUser.SaveTrainingFeedBack", 
			"Author="_$ZCONVERT(data.author, "I","UTF8")_
			"TrainingId="_tr.%Id()_
			"Rating="_data.rating_
			"WhatLiked="_$ZCONVERT(data.whatLiked, "I","UTF8")_
			"WhatImprovements="_$ZCONVERT(data.whatImprovements, "I","UTF8")_
			"WhatHear="_$ZCONVERT(data.whatHear, "I","UTF8")_
			"AboutTeacher="_$ZCONVERT(data.aboutTeacher, "I","UTF8"))
	
      	set fb = ##class(Stc.Data.FeedBack).%New()
      	set fb.Author = $ZCONVERT(data.author, "I","UTF8")
      	set fb.Training = tr
      	set fb.Rating = data.rating
      	set fb.WhatLiked = $ZCONVERT(data.whatLiked, "I","UTF8")
      	set fb.WhatImprovements = $ZCONVERT(data.whatImprovements, "I","UTF8")
      	set fb.WhatHear = $ZCONVERT(data.whatHear, "I","UTF8")
      	set fb.AboutTeacher = $ZCONVERT(data.aboutTeacher, "I","UTF8")
      	set status = fb.%Save()
      	
      	if ($$$ISERR(status)) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSave")) 
      	
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetSchedule">
<Description>
Get schedule for IS site
Method="GET" Url="/json/schedule"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.courses = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE ScheduleCourseCur CURSOR FOR 
		 	 SELECT ID, 
		 	 ISNULL((SELECT MIN(DateStart)FROM Stc_Data.Training WHERE Course = course.ID AND IsCompleted = 0),'11/11/2099') As MinTrainingDate,
		 	 (SELECT COUNT(ID)FROM Stc_Data.Training WHERE Course = course.ID) As TotalCount
		 	 FROM Stc_Data.Course as course
			 WHERE IsInUse = 1
			 ORDER BY MinTrainingDate, TotalCount DESC)	
		
	&sql(OPEN ScheduleCourseCur)
	for  
	{	
		&sql(FETCH ScheduleCourseCur INTO :courseId, :minTrainingDate, :totalCount) 
		quit:(SQLCODE '= 0)
		
		set course = ##class(Stc.Data.Course).%OpenId(courseId).ConvertToProxyObject()
		set course.trainings = ##class(%ListOfObjects).%New()
		
		// Course trainings	
		&sql(DECLARE ScheduleTrainingCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Stc_Data.Training 
		 	 WHERE Course = :courseId AND IsCompleted = 0
		 	 ORDER BY DateStart)
		
		&sql(OPEN ScheduleTrainingCur)
		for  
		{	
			&sql(FETCH ScheduleTrainingCur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			set trObj = ##class(Stc.Data.Training).%OpenId(trId)
			set trProxy = trObj.ConvertToProxyObjectForPublic()
			set trProxy.dateGoogleCalendar = $REPLACE($ZD(trObj.DateStart, 3)_"/"_$ZD(trObj.DateFinish+1, 3), "-", "")
		
			do course.trainings.Insert(trProxy)	
		}
		&sql(CLOSE ScheduleTrainingCur)
		
		do proxy.courses.Insert(course)		
	}
	&sql(CLOSE ScheduleCourseCur)
	
	quit proxy.%ToJSON()
]]></Implementation>
</Method>
</Class>
</Export>
