<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ==================================== COURSES ==================================== 

]]></Content>
</UDLText>

<Method name="GetCoursesFullInfo">
<Description>
Get full info about all courses</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Course", "Stc.Data.Course", params, "IsInUse = "_..ParseParameter(params.isInUse)))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="SaveCourse">
<Description>
Save or create course</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	do ##class(Stc.Data.Course).Save(data, .status)
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createCourse",:"saveCourse"), "| "_status)) 
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).BuildCubes()
	
	quit status
]]></Implementation>
</Method>

<Method name="GetCourse">
<Description>
Get course</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		do ..GetProxyObject("Stc.Data.Course", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="ChangeIsInUseCourse">
<Description>
Mark/unmark course as unused</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
		set course = ##class(Stc.Data.Course).%OpenId(data.id)
		set course.IsInUse = 'course.IsInUse
		set status = course.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", "| "_status))
		
		TCOMMIT 
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== APPLICATION ==================================== 

]]></Content>
</UDLText>

<Method name="GetOrders">
<Description>
Get all applications (or by status)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = ""
      	if (params.status '= "All"){
	      	set whereRequired = "OrderStatus->Code = '"_..ParseParameter(params.status)_"'"
	    }
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Order", "Stc.Data.Order", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetOrdersNewStudent">
<Description>
Get all applications - from students for given training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
	    
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.OrderNewStudent", "Stc.Data.OrderNewStudent", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetDirtyOrder">
<Description>
Get not approved application by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		do ..GetProxyObject("Stc.Data.OrderDirty", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetOrderNewStudent">
<Description>
Get application from student by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		do ..GetProxyObject("Stc.Data.OrderNewStudent", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="CreateApprovedOrder">
<Description>
Create approved application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))

      	set approved = ##class(Stc.Data.OrderApproved).Create(data.id, .status)
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createApprovedOrder", "| "_status))
      	
      	set status = ##class(Stc.Data.Order).Delete(data.id)
      	$$$THROWONERROR(status, status)
      	
      	if (data.sendEmail = 1) {
	      	set status = ..SendOrderAccessCode(approved)
	      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("sendEmail", "| "_status))
      	}
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="SendOrderAccessCode">
<Description>
Send access code to contact person's email</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>order:Stc.Data.OrderApproved</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Check privilege for Person table
	set status = ##class(Stc.Data.Person).CheckDeletePrivilege()
	quit:$$$ISERR(status) status
		
	set domainWebApp = $GET(^Settings("Stc", "DomainName"))_$GET(^Settings("Stc", "WebApp")) 
	
	// 1 - Курс,  2 - домен для системы, 3 - код доступа к заявкe
	set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToCompanyContact"), order.Course.Name.Value, domainWebApp, order.AccessCode)
	
	set status = ##class(Stc.Utils.Email).Send(order.Company.Contact.Email, ##class(Stc.Utils.Msg).GetMsg("emailSubject"), msg)
	
	if $$$ISERR(status) quit ##class(Stc.Utils.Msg).GetErrorStatus("sendEmail", "| "_status)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SendEmailToCompanyContactForApprovedOrder">
<Description>
Resend email with instructions to organization's contact person</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	try{
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		$$$THROWONERROR(status, ..SendOrderAccessCode(##class(Stc.Data.OrderApproved).AccessCodeIdxOpen(data.code)))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="DeleteOrder">
<Description>
Delete application by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(Stc.Data.Order).Delete(id))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="DeleteOrderNewStudent">
<Description>
Delete application from student by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(Stc.Data.OrderNewStudent).Delete(id))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="ChangeOrderCompany">
<Description>
Change organization in application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set order = ##class(Stc.Data.Order).%OpenId(data.orderId,,.status)
      	$$$THROWONERROR(status, status)
      	
      	set order.Company = ##class(Stc.Data.Company).%OpenId(data.companyId,,.status)
      	$$$THROWONERROR(status, status)
      	
      	$$$THROWONERROR(status, order.%Save())
      	
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="ChangeOrderNewStudentCompany">
<Description>
Change organization of application from student</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set order = ##class(Stc.Data.OrderNewStudent).%OpenId(data.orderId,,.status)
      	$$$THROWONERROR(status, status)
      	
      	set order.Company = ##class(Stc.Data.Company).%OpenId(data.companyId,,.status)
      	$$$THROWONERROR(status, status)
      	
      	$$$THROWONERROR(status, order.%Save())
      	
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== ORGANIZATIONS ==================================== 

]]></Content>
</UDLText>

<Method name="SaveCompany">
<Description>
Save new organization data</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set company = ##class(Stc.Data.Company).Save(data, .status)
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompany", "| "_status)) 	
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}

	if (status = $$$OK) do ##class(Stc.Data.Training).BuildCubes()

	quit status
]]></Implementation>
</Method>

<Method name="SaveCompanyFromOrder">
<Description>
Save organization from application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	// Создание компании
      	set company = ##class(Stc.Data.Company).Save(data.company, .status)
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompany", "| "_status)) 
      	
      	// Создание контакта компании
      	set data.company.contact.company = ##class(%ZEN.proxyObject).%New()
      	set data.company.contact.company.id = company.%Id()
      	  	
		set company.Contact = ##class(Stc.Data.Person).Save(data.company.contact, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompanyContact", " | "_status))
		
		set status = company.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany", " | "_status))
      	
      	// Теперь у новой заявки есть компания
      	set order = ##class(Stc.Data.OrderDirty).%OpenId(data.orderId)
      	set order.Company = company
      	
      	set status = order.%Save()
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveDirtyOrder", " | "_status))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="SaveCompanyFromOrderNewStudent">
<Description>
Save organization and contact person from application from student</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	// Создание компании
      	set company = ##class(Stc.Data.Company).Save(data.company, .status)
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompany", "| "_status)) 
      	
      	// Создание контакта компании
      	set data.company.contact.company = ##class(%ZEN.proxyObject).%New()
      	set data.company.contact.company.id = company.%Id()
      	set data.company.contact.id = ""
      	
      	if (##class(Stc.Data.Person).EmailIdxExists(data.company.contact.email) = 1){
	    	set company.Contact = ##class(Stc.Data.Person).EmailIdxOpen(data.company.contact.email)
	    }
	    else{
			set company.Contact = ##class(Stc.Data.Person).Save(data.company.contact, .status)
		}  	
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompanyContact", " | "_status))
		
		set status = company.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany", " | "_status))
      	
      	// Теперь у новой заявки есть компания
      	set order = ##class(Stc.Data.OrderNewStudent).%OpenId(data.orderId)
      	set order.Company = company
      	
      	set status = order.%Save()
      	if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveDirtyOrder", " | "_status))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="ChangeCompanyContact">
<Description>
Change contact person of organization</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set company = ##class(Stc.Data.Company).%OpenId(data.companyId,3, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openCompany", "| "_status))
		
		// Если замена контакта, иначе обновление данных
		if (data.isReplace = 1){
			// Если существует такой контакт, то заменяем им. Иначе - создаем и заменяем
			if (##class(Stc.Data.Person).EmailIdxExists(data.contact.email) = 1){
				set newContact = ##class(Stc.Data.Person).EmailIdxOpen(data.contact.email,,.status)
				if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openPerson", "| "_status))			
			}
			else{
				set newContact = ##class(Stc.Data.Person).Save(data.contact, .status)
				if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("savePerson", "| "_status))
			}
			
			set company.Contact = newContact
		}
		else{
			set order = ##class(Stc.Data.OrderDirty).%OpenId(data.orderId,3,.status)
			if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openOrder", "| "_status))
			
			do company.Contact.LastName.SetValues(order.LastName.%Id())
			do company.Contact.FirstName.SetValues(order.FirstName.%Id())
			do company.Contact.MiddleName.SetValues(order.MiddleName.%Id())
			set company.Contact.Email = $ZCONVERT(order.Email, "I","UTF8")
			set company.Contact.Phone = $ZCONVERT(order.Phone, "I","UTF8")
			set company.Contact.Skype = $ZCONVERT(order.Skype, "I","UTF8")
			set status = company.Contact.%Save()
			
			if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("savePerson", "| "_status))
		}
		
		set status = company.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany", "| "_status))
			
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="GetCompaniesFullInfo">
<Description>
Get all organizations for table, full info</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = ""
      	if (params.status '= "All") && (params.status=1){
	      	set whereRequired = "Type->Code = 'Univer'"
	    }
	    
		$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Company", "Stc.Data.Company", params, whereRequired))
    
    }
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetCompany">
<Description>
Get organization by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		do ..GetProxyObject("Stc.Data.Company", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Delete organization if it is available</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(Stc.Data.Company).Delete(id))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== TRAININGS ==================================== 

]]></Content>
</UDLText>

<Method name="TrainingCalendarEvent">
<Description>
Working with event in Google Calendar - create, update, delete</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		if (data.method '= "get"){
			// Check privilege for Person table
			$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		}
		
		set training = ##class(Stc.Data.Training).%OpenId(data.id,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_status))
	
		set calendarId = $g(^Settings("Stc","Google", "CalendarId"))
		set sslConfig = $g(^Settings("Stc","Google", "SslConfig"))
		set rtoken = $g(^Settings("Stc","Google", "RefreshToken"))
		
		do ##class(Stc.Google.Authorize).ExchangeToken(rtoken, .st, .atoken)
		if (st '= "success") $$$ThrowStatus($$$ERROR(5002, "Exchange token error: "_st))
	
		if (data.method = "get"){
			// Получить событие
			set event = ##class(%ZEN.proxyObject).%New()
			set proxy = ##class(%ZEN.proxyObject).%New()
			set proxy.id = training.%Id()
			
			if (training.CalendarEvent = ""){
				// Если еще не было создано, то выводим данные из обучения
				set event.summary = training.Course.Name.Value_". "_training.City.Name.Value
				set event.start = ##class(%ZEN.proxyObject).%New()
				set event.start.date = $zd(training.DateStart,3)
				set event.end = ##class(%ZEN.proxyObject).%New()
				set event.end.date = $zd(training.DateFinish+1,3)
				set event.location = training.City.Name.Value_", "_training.Street.Value
					
				set domainWebApp = %request.CgiEnvs("HTTP_HOST")_$GET(^Settings("Stc", "WebApp")) 
				
				set curatorData = ""
				if (training.CuratorFullName.Value '= ""){
					set curatorData = "<br>"_##class(Stc.Utils.Msg).GetMsg("contactPerson")_":<br>"_training.CuratorFullName.Value
					if (training.CuratorPhone '= ""){
						set curatorData = curatorData_", "_training.CuratorPhone
					}
					set curatorData = curatorData_"<br>"
				}
				
				set otherInfoData = ""
				if (training.OtherInfo.Value '= ""){
					set otherInfoData = "<br>"_training.OtherInfo.Value
				}
				
				set event.description = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("CalendarEvent"),
									training.Course.ProgramUrl,
									domainWebApp,
									training.%Id(),
									training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value_"<br>"_training.Street.Value_", "_training.Room,
									training.Teacher.LastName.Value_" "_training.Teacher.FirstName.Value_" "_training.Teacher.MiddleName.Value_"<br>"_training.Teacher.Email,
									$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
									curatorData,
									otherInfoData)
			}
			else{
				// Получаем созданное
				$$$TOE(status, ##class(Stc.Google.Calendar).GetEvent(calendarId, training.CalendarEvent,.eventObj, atoken, sslConfig))
				
				set event.summary = $ZCONVERT(eventObj.summary, "I", "UTF8")
				set event.location = $ZCONVERT(eventObj.location, "I", "UTF8")
				set event.description = $ZCONVERT(eventObj.description, "I", "UTF8")
				set event.start = eventObj.start
				set event.end = eventObj.end
				set event.exists = 1
			}
				
			set proxy.event = event
			do proxy.%ToJSON()
		}
		elseif (data.method = "create"){
			set data.event.summary = data.event.summary
			set data.event.location = data.event.location
			set data.event.description = data.event.description
			
			$$$TOE(status, ##class(Stc.Google.Calendar).CreateEvent(calendarId, data.event, atoken, sslConfig, .eventId))
			set training.CalendarEvent = eventId
			do training.%Save()
		}
		elseif (data.method = "update"){
			$$$TOE(status, ##class(Stc.Google.Calendar).ModifyEvent(calendarId, training.CalendarEvent, data.event, atoken, sslConfig))
		}
		elseif (data.method = "delete"){
			set eventId = training.CalendarEvent
			set training.CalendarEvent = ""
			do training.%Save()
			$$$TOE(status, ##class(Stc.Google.Calendar).DeleteEvent(calendarId, eventId, atoken, sslConfig))
		}
	}
	catch (ex){
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveTraining">
<Description>
Create training from selected applications, create/update subgroups</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set isNew = 0
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		do ##class(Stc.Data.Training).Save(data, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createTraining",:"saveTraining"), " | "_status)) 
		if (data.id=""){
			set isNew = 1
		}
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (isNew=1){
		do ##class(Stc.Data.Training).BuildCubes()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="DeleteTraining">
<Description>
Delete training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		set (sgroups, certs) = 0
		
		&sql(SELECT COUNT(ID) INTO :sgroups FROM Stc_Data.Training_SubGroups WHERE Training = :id)
		
		if (sgroups = 0){
			&sql(SELECT COUNT(ID) INTO :certs FROM Stc_Data.Certificate WHERE Training = :id)
		}
		
		if (sgroups > 0) || (certs > 0) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteTrainingImpossible"))
	
		set status = ##class(Stc.Data.Training).Delete(id)
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteTraining", "| "_status))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK){
		do ##class(Stc.Data.Training).BuildCubes()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="CompleteTraining">
<Description>
Complete training and create certificates for each student</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.id,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_status)) 
		
		if (training.IsCompleted = 1) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("isAlreadyCompletedTraining", "| "_status))
		
		set training.IsCompleted = 1
		set status = training.%Save()
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_status)) 
		
		// Создать сертификаты для каждого студента из каждой подгруппы в обучении
		set status = training.CreateCertificates()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCertificate", "| "_status)) 
		
		set trId = training.%Id()
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
	
    quit status
]]></Implementation>
</Method>

<Method name="CreateSubGroupsForTraining">
<Description>
Add subgroups, based on selected application to training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.trainingId)
		$$$THROWONERROR(status, training.AddSubGroupsFromOrders(data.orders))
		
		set status = training.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_status)) 
		set trId = training.%Id()
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
	
    quit status
]]></Implementation>
</Method>

<Method name="GetTrainings">
<Description>
Get all trainings for table</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	      	
      	set whereRequired = ""
      	if (params.status '= "All"){
	      	set whereRequired = "IsCompleted = '"_..ParseParameter(params.status)_"'"
	    }
	    
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Training", "Stc.Data.Training", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetTraining">
<Description>
Get training by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		do ..GetProxyObject("Stc.Data.Training", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetTrainingSubGroups">
<Description>
Get subgroups of training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT SubGroups FROM Stc_Data.Training_SubGroups", "Stc.Data.SubGroup", params, "Training = "_..ParseParameter(params.trainingId)))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetTrainingStudents">
<Description>
Get students of trainings</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = '"_..ParseParameter(params.trainingId)_"')"
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT Students FROM Stc_Data.SubGroup_Students", "Stc.Data.Person", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetTrainingFeedBacks">
<Description>
Get training feedbacks. grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.FeedBack", "Stc.Data.FeedBack", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="DeleteFeedBack">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Check privilege for Person table
	set status = ##class(Stc.Data.Person).CheckDeletePrivilege()
	quit:$$$ISERR(status) status
		
	quit ##class(Stc.Data.FeedBack).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetTrainingStudentsEmails">
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE StudCur CURSOR FOR 
		 	 SELECT Students As ID, Students->LastName->Value As LastName, Students->Email 
		 	 FROM Stc_Data.SubGroup_Students
		 	 WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId)
		 	 ORDER BY LastName)	
		
	&sql(OPEN StudCur)
	for  
	{	
		&sql(FETCH StudCur INTO :id, :lastName, :email) 
		quit:(SQLCODE '= 0)
		set stEmail = ##class(%ZEN.proxyObject).%New()
		set stEmail.id = id
		set stEmail.lastName = lastName
		set stEmail.email = email
		do proxy.children.Insert(stEmail)	
	}
		
	&sql(CLOSE StudCur)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateSubGroup">
<Description>
Add subgroup into training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.trainingId)
		set payer = ##class(Stc.Data.Company).%OpenId(data.payerId)
		set sgroup = ##class(Stc.Data.SubGroup).Create(payer, ##class(%ArrayOfObjects).%New(), training.Course, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createSubGroup", "| "_status)) 
		
		do training.SubGroups.SetAt(sgroup, sgroup.%Id())
	
		set status = training.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_status)) 
		set trId = training.%Id()
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
	
	quit status
]]></Implementation>
</Method>

<Method name="AddNewStudentIntoTraining">
<Description>
Add person from application into training, create/open subgroup and add person</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.trainingId)
		set order = ##class(Stc.Data.OrderNewStudent).%OpenId(data.orderId)
		
		if (data.type = "create_add") || (data.type = "update_add"){
			
			if (data.type = "create_add"){
				set person = ##class(Stc.Data.Person).%New()
				set person.LastName = ##class(Stc.Data.Localization.LText).Create("")
				set person.FirstName = ##class(Stc.Data.Localization.LText).Create("")
				set person.MiddleName = ##class(Stc.Data.Localization.LText).Create("")
			}
			elseif (data.type = "update_add"){
				set person = ##class(Stc.Data.Person).EmailIdxOpen(order.Email)
			}
			
			do person.LastName.SetValues(order.LastName.%Id())
			do person.FirstName.SetValues(order.FirstName.%Id())
			do person.MiddleName.SetValues(order.MiddleName.%Id())
			
			set person.Email = order.Email
			set person.Phone = order.Phone
			set person.Skype = order.Skype
			
			set person.Company = order.Company
			
			set status = person.%Save()
			$$$THROWONERROR(status, status)
			
			set status = training.AddPersonIntoTraining(person.%Id())
			$$$THROWONERROR(status, status)
		}
		elseif (data.type = "old_add"){
			set person = ##class(Stc.Data.Person).EmailIdxOpen(order.Email)
			set status = training.AddPersonIntoTraining(person.%Id())
			$$$THROWONERROR(status, status)
		}
		
		set status = ##class(Stc.Data.OrderNewStudent).%DeleteId(order.%Id())
		$$$THROWONERROR(status, status)
		
		set status = training.%Save()
		$$$THROWONERROR(status, status)
		
		set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToNewTrainingStudent")
		set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToNewTrainingStudent"),
						$ZDATE(training.DateStart, 3),
						training.Course.Name.Value,
						training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value,
						training.Street.Value,
						training.Room,
						$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
						training.Teacher.LastName.Value_" "_training.Teacher.FirstName.Value,
						training.OtherInfo.Value)
		set status = ##class(Stc.Utils.Email).Send(order.Email, subj, msg)
		if $$$OK '= status set status = ##class(Stc.Utils.Msg).GetErrorStatus("emailAddNewStudent", "| "_status) 
		set trId = training.%Id()
			
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
	
	quit status
]]></Implementation>
</Method>

<Method name="DeleteSubGroup">
<Description>
Delete subgroup from training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingIdsgroupId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		set training = ##class(Stc.Data.Training).%OpenId($p(trainingIdsgroupId,";",1), , .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_status)) 
		
		set status = training.DeleteSubGroup($p(trainingIdsgroupId,";",2))
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteSubGroup", "| "_status)) 
		
		set status = training.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_status)) 
		set trId = training.%Id()	
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveSubGroupPayment">
<Description>
Save pay of subgroup</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set sg = ##class(Stc.Data.SubGroup).%OpenId(data.id)
		set sg.Amount = data.amount
		set sg.Discount = data.discount
		set sg.Currency = ##class(Stc.Data.Currency).%OpenId(data.currencyId)
		set status = sg.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup" ," | "_status)) 
			
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveSubGroupContract">
<Description>
Save contract of subgroup</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set sg = ##class(Stc.Data.SubGroup).%OpenId(data.id)
		set sg.SignerFullName.Value =  $ZCONVERT(data.fullName, "I","UTF8")
		set sg.DocumentInfo.Value = $ZCONVERT(data.document, "I","UTF8")
		set sg.DateStart = $ZDATEH(data.dateStart, 15)
		set sg.DateFinish = $ZDATEH(data.dateFinish, 15)
		set status = sg.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup" ," | "_status)) 
			
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetAllCurrencies">
<Description>
All currencies</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT ID As id, Name->Value As name FROM Stc_Data.Currency"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetTrainingCertificates">
<Description>
All certificates of training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = "Training = "_..ParseParameter(params.trainingId)
	    
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Certificate", "Stc.Data.Certificate", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="CreateTrainingCertificates">
<Description>
Create all certificates for training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.id,,.status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_status)) 
		
	
		// Создать сертификаты для каждого студента из каждой подгруппы в обучении
		set status = training.CreateCertificates()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCertificate", "| "_status)) 
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="SendEmailFromTraining">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
				
		$$$THROWONERROR(status, ##class(Stc.Utils.Email).Send(data.emails, $ZCONVERT(data.subject, "I", "UTF8"), $ZCONVERT(data.msg, "I", "UTF8")))
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="ChangeTrainingStatusAutoMailing">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set training = ##class(Stc.Data.Training).%OpenId(data.id)
		if (data.type = "students"){
			set training.IsStudentsAutoMailing = data.isAutoMailing
		}
		elseif (data.type = "teacher"){
			set training.IsTeacherAutoMailing = data.isAutoMailing
		}
		elseif (data.type = "curator"){
			set training.IsCuratorAutoMailing = data.isAutoMailing
		}
		elseif (data.type = "feedback"){
			set training.IsFeedBackAutoMailing = data.isAutoMailing
		}
		
		set status = training.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", " | "_status)) 
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
    quit status
]]></Implementation>
</Method>

<Method name="GetTrainingEmailPattern">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "students"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudents")
		set proxy.msg = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudents")
	}
	elseif (type = "teacher"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingTeacher")
		set proxy.msg = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingTeacher")
	}
	elseif (type = "curator"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingCurator")
		set proxy.msg = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingCurator")
	}
	elseif (type = "feedback"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudentsFeedBack")
		set proxy.msg = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudentsFeedBack")
	}
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== CERTIFICATES ==================================== 

]]></Content>
</UDLText>

<Method name="GetCertificates">
<Description>
Get all certificates for table</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereRequired = ""
      	if (params.isPrinted '= "All"){
	      	set whereRequired = "IsPrinted = "_..ParseParameter(params.isPrinted)
	    }
	    
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Certificate", "Stc.Data.Certificate", params, whereRequired))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="PrintCertificate">
<Description>
Print certificate</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		set cert = ##class(Stc.Data.Certificate).NumberIdxOpen(number,,.status)
		$$$THROWONERROR(status, status)
 		
 		set cert.IsPrinted = 'cert.IsPrinted
 		$$$THROWONERROR(status, cert.%Save())
    }
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="DeleteCertificate">
<Description>
Delete certificate</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<Implementation><![CDATA[
	// Check privilege for Person table
	set status = ##class(Stc.Data.Person).CheckDeletePrivilege()
	quit:$$$ISERR(status) status
		
	set status = ##class(Stc.Data.Certificate).NumberIdxDelete(number)
	if $$$ISERR(status) quit ##class(Stc.Utils.Msg).GetErrorStatus("deleteCertificate", "| "_status)
	
	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== PERSONS ==================================== 

]]></Content>
</UDLText>

<Method name="SavePerson">
<Description>
Refresh person's data</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		do ##class(Stc.Data.Person).Save(data, .status)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createPerson",:"savePerson"), " | "_status)) 
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="DeletePerson">
<Description>
Delete person </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		if (##class(Stc.Data.Person).IsEditable(id, 1) = 0) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deletePersonImpossible"))
	
		set status = ##class(Stc.Data.Person).Delete(id)
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deletePerson", "| "_status))
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Get person by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[

	set status = $$$OK
	try{
		do ..GetProxyObject("Stc.Data.Person", id).%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetPersonByEmail">
<Description>
Get person by Email</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String</FormalSpec>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		set person = ##class(Stc.Data.Person).EmailIdxOpen(email,,.status)
		
		if (status = $$$OK) do person.ConvertToProxyObject().%ToJSON()
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetAllPersons">
<Description>
Get all persons for table</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	$$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Person", "Stc.Data.Person", params,))
	}
	catch ex {
		set status = ex.AsStatus()
	}

	quit status
]]></Implementation>
</Method>

<Method name="GetPersonByLastNameOrEmailStartsWith">
<Description>
All students, search by last name and email</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<Implementation><![CDATA[
	set word = ..ParseParameter(word)
	set sql = "SELECT ID as id, "_
	"LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email || ', ' || Company->ShortName->Value as text "_
	"FROM Stc_Data.Person "_
	"WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
	"ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetFreeTeachers">
<Description>
Search teachers, that don't teach selected course</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseword:%String</FormalSpec>
<Implementation><![CDATA[
	set where = "id NOT IN (SELECT Teachers FROM Stc_Data.Course_Teachers WHERE Course = "_..ParseParameter($p(courseword,";",1))_") AND"
    
    quit ..GetPersonByLastNameOrEmailStartsWith($p(courseword,";",2), where)
]]></Implementation>
</Method>

<Method name="GetFreeStudents">
<Description>
Search persons, that not in subgroup of trainings</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sgroupword:%String</FormalSpec>
<Implementation><![CDATA[
	set where = "id NOT IN (SELECT Students FROM Stc_Data.SubGroup_Students WHERE SubGroup = "_..ParseParameter($p(sgroupword,";",1))_") AND"
    
    quit ..GetPersonByLastNameOrEmailStartsWith($p(sgroupword,";",2), where)
]]></Implementation>
</Method>

<Method name="GetFreeTrainingStudents">
<Description>
Search persons, that not in training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingword:%String</FormalSpec>
<Implementation><![CDATA[
	set where = "id NOT IN (SELECT Students FROM Stc_Data.SubGroup_Students WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = '"_..ParseParameter($p(trainingword,";",1))_"')) AND"
    
    quit ..GetPersonByLastNameOrEmailStartsWith($p(trainingword,";",2), where)
]]></Implementation>
</Method>

<Method name="GetStudentsFromOrders">
<Description>
Create all students from given applications</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>orderIdString</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set orderIdString = ..ParseParameter(orderIdString)
	set sql = "SELECT Students As id, "_
	"Students->LastName->Value As lastName, "_
	"Students->FirstName->Value As firstName, "_
	"Students->MiddleName->Value As middleName, "_
	"Students->Email As email, Students->Phone As phone, "_
	"Students->Skype As skype, Students->Company->ShortName->Value As company "_
	"FROM Stc_Data.OrderApproved_Students "_
	"WHERE OrderApproved IN ("_orderIdString_") "_
	"ORDER BY company, lastName"
    
   	quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="DeleteCourseTeacher">
<Description>
Delete teacher and course link</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseIdTeacherId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		set course = ##class(Stc.Data.Course).%OpenId($p(courseIdTeacherId,";",1), , .status)
		$$$THROWONERROR(status, status)
		do course.Teachers.RemoveAt($p(courseIdTeacherId,";",2))
		set status = course.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", " | "_status)) 
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="DeleteTrainingStudent">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingIdstudentId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Check privilege for Person table
	set status = ##class(Stc.Data.Person).CheckDeletePrivilege()
	quit:$$$ISERR(status) status
	
	set trainingId = $piece(trainingIdstudentId,";",1)
	set studentId = $piece(trainingIdstudentId,";",2)
	
	set sgroupId = 0
	
	&sql(SELECT SubGroup INTO :sgroupId
		 FROM Stc_Data.SubGroup_Students
		 WHERE SubGroup IN (SELECT SubGroups 
		 					FROM Stc_Data.Training_SubGroups 
		 					WHERE Training = :trainingId) 
		 				AND Students = :studentId)
	
	set status = ..DeleteSubGroupStudent(sgroupId_";"_studentId)

	if (status = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trainingId)
		
	quit status
]]></Implementation>
</Method>

<Method name="DeleteSubGroupStudent">
<Description>
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sgroupIdstudentId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	
	try{
		TSTART

		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		set sgroup = ##class(Stc.Data.SubGroup).%OpenId($p(sgroupIdstudentId,";",1), , .status)
		$$$THROWONERROR(status, status)
		do sgroup.Students.RemoveAt($p(sgroupIdstudentId,";",2))
		set status = sgroup.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup", " | "_status))
		
		TCOMMIT		
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetPersonOrders">
<Description>
All application with person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT OrderApproved as id, "_
	"OrderApproved->AccessCode As code, "_
	"OrderApproved->Course->Name->Value As course, "_
	"OrderApproved->TrainingDate As trainingDate, "_
	"OrderApproved->City->Name->Value As city, "_
	"OrderApproved->Company->ShortName->Value As company, "_
	"OrderApproved->CreatedTS As createdTS "_
	"FROM Stc_Data.OrderApproved_Students WHERE Students = "_..ParseParameter(id)_" "_
	"ORDER BY createdTS"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonTrainings">
<Description>
All trainings with person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT Training as id, "_
	"Training->Course->Name->Value As course, "_
	"Training->City->Name->Value As city, "_
	"Training->DateStart As dateStart, "_
	"Training->DateFinish As dateFinish, "_
	"Training->TimeStart As timeStart, "_
	"Training->TimeFinish As timeFinish, "_
	"Training->isCompleted As isCompleted "_
	"FROM Stc_Data.Training_SubGroups "_
	"WHERE SubGroups IN (SELECT SubGroup FROM Stc_Data.SubGroup_Students WHERE Students = "_..ParseParameter(id)_") "_
	"ORDER BY isCompleted, dateFinish"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCourses">
<Description>
All courses, where person is teacher</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT Course as id, "_
	"Course->Name->Value As name, "_
	"Course->Hours As hours, "_
	"Course->Days As days, "_
	"Course->ProgramUrl As programUrl "_
	"FROM Stc_Data.Course_Teachers WHERE Teachers = "_..ParseParameter(id)_" "_
	"ORDER BY name"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCompanies">
<Description>
All organizations, where person is contact person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT ID as id, "_
	"ShortName->Value As shortName, "_
	"LegalAddress->Value As legalAddress "_
	"FROM Stc_Data.Company WHERE Contact = "_..ParseParameter(id)_" "_
	"ORDER BY shortName"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCertificates">
<Description>
All certificates of person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT ID as id, "_
	"Number As number, "_
	"Training->Course->Name->Value As course, "_
	"CreatedDate As createdDate, "_
	"IsPrinted As isPrinted "_
	"FROM Stc_Data.Certificate WHERE Student = "_..ParseParameter(id)_" "_
	"ORDER BY course"
	
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="CreateSubGroupStudent">
<Description>
Create / add student into subgroup of training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK
	set trId = ""
	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		// Добавляем существующего
		set student = ##class(Stc.Data.Person).%OpenId(data.student.id,,.status)
		
		if $$$ISERR(status) set student = ##class(Stc.Data.Person).Save(data.student, .status)
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createPerson", "| "_status))
		
		if (data.training.id = 0){
			set sgroup = ##class(Stc.Data.SubGroup).%OpenId(data.group.id,, .status)
			$$$THROWONERROR(status, status)
		
			$$$THROWONERROR(status, sgroup.Students.SetAt(student, student.%Id()))
		
			set status = sgroup.%Save()
			if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup", "| "_status))
		}
		else{
			set training = ##class(Stc.Data.Training).%OpenId(data.training.id)
			set status = training.AddPersonIntoTraining(student.%Id())
			$$$THROWONERROR(status, status)
			$$$THROWONERROR(status, training.%Save())
			
			set trId = training.%Id()
		}
		
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	if (status = $$$OK) && (trId '= "") do ##class(Stc.Data.Training).UpdateFacts(trId)
	
	quit status
]]></Implementation>
</Method>

<Method name="CreateCourseTeacher">
<Description>
Assign teacher to course</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		// Добавляем существующего
		set teacher = ##class(Stc.Data.Person).%OpenId(data.teacher.id,,.status)
		
		if $$$ISERR(status) set teacher = ##class(Stc.Data.Person).Save(data.teacher, .status)
		
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createPerson", "| "_status))
		
		set course = ##class(Stc.Data.Course).%OpenId(data.course.id,, .status)
		$$$THROWONERROR(status, status)
		
		$$$THROWONERROR(status, course.Teachers.SetAt(teacher, teacher.%Id()))
		set status = course.%Save()
		if $$$ISERR(status) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", "| "_status))
		 
		TCOMMIT
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetCourseTeachers">
<Description>
Get all teachers of course</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "SELECT Teachers As id, "_
	"Teachers->LastName->Value As lastName, "_
	"Teachers->FirstName->Value As firstName, "_
	"Teachers->MiddleName->Value As middleName, "_
	"Teachers->Email As email, "_
	"Teachers->Phone As phone, "_
	"Teachers->Skype As skype, "_
	"Teachers->Company->ShortName->Value As company "_
	"FROM Stc_Data.Course_Teachers "_
	"WHERE Course = "_..ParseParameter(courseId)_" "_
	"ORDER BY  lastName"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== SETTINGS ==================================== 

]]></Content>
</UDLText>

<Method name="GetGoogleSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())

		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.type = type
		
		if (type = "settings"){
			set proxy.data = ##class(%ZEN.proxyObject).%New()
			set proxy.data.token = $GET(^Settings("Stc","Google","RefreshToken"))
			set proxy.data.ssl = $GET(^Settings("Stc","Google","SslConfig"))
		}
		elseif (type = "calendar"){
			set proxy.data = ##class(%ZEN.proxyObject).%New()
			set proxy.data.id = $GET(^Settings("Stc","Google","CalendarId"))
			set proxy.data.src = $GET(^Settings("Stc","GoogleCalendarSrc"))
			set proxy.data.msg = ##class(Stc.Utils.Msg).GetMsg("CalendarEvent")
		}
		
		do proxy.%ToJSON()		
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveGoogleSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		if (type = "settings"){
			s ^Settings("Stc","Google","RefreshToken") = data.token
			s ^Settings("Stc","Google","SslConfig") = data.ssl
		}
		elseif (type = "calendar"){
			s ^Settings("Stc","Google","CalendarId") = data.id
			s ^Settings("Stc","GoogleCalendarSrc") = data.src
			s ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"CalendarEvent") = $ZCONVERT(data.msg, "I","UTF8")
			
		}
		
		TCOMMIT	
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetMailSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())

		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.data = ##class(%ZEN.proxyObject).%New()
		set proxy.type = type
		
		if (type = "settings"){
			set proxy.data.from = $GET(^Settings("Stc","EmailFrom"))
			set proxy.data.password = $GET(^Settings("Stc","EmailSMTPPASSWORD"))
			set proxy.data.port = $GET(^Settings("Stc","EmailSMTPPORT"))
			set proxy.data.server = $GET(^Settings("Stc","EmailSMTPSERVER"))
			set proxy.data.user = $GET(^Settings("Stc","EmailSMTPUSER"))
		}
		elseif (type = "reminder"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingStudents"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingStudents"))
			set proxy.data.days = $GET(^Settings("Stc", "StudentsAutoMailingDays"), 2)
		}
		elseif (type = "feedback"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingStudentsFeedBack"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingStudentsFeedBack"))
		}
		elseif (type = "teacher"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingTeacher"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingTeacher"))
			set proxy.data.days = $GET(^Settings("Stc", "TeacherAutoMailingDays"), 4)			
		}
		elseif (type = "curator"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingCurator"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingCurator"))
			set proxy.data.days = $GET(^Settings("Stc", "CuratorAutoMailingDays"), 4)
		}
		elseif (type = "registration"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToNewTrainingStudent"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToNewTrainingStudent"))	
		}
		elseif (type = "order"){
			set proxy.data.subj = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"emailSubject"))
			set proxy.data.msg = $GET(^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToCompanyContact"))	
		}
		
		do proxy.%ToJSON()		
	}
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="SaveMailSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		TSTART
		
		// Check privilege for Person table
		$$$THROWONERROR(status, ##class(Stc.Data.Person).CheckDeletePrivilege())
		
		$$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		if (type = "settings"){
			set ^Settings("Stc","EmailFrom") = data.from
			set ^Settings("Stc","EmailSMTPPASSWORD") = data.password
			set ^Settings("Stc","EmailSMTPPORT") = data.port
			set ^Settings("Stc","EmailSMTPSERVER") = data.server
			set ^Settings("Stc","EmailSMTPUSER") = data.user
		}
		elseif (type = "reminder"){
			set ^CacheMsg("Stc", ##class(%MessageDictionary).GetSessionLanguage(), "msgSubjectToTrainingStudents") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc", ##class(%MessageDictionary).GetSessionLanguage(), "msgToTrainingStudents") = $ZCONVERT(data.msg, "I","UTF8")
			set ^Settings("Stc", "StudentsAutoMailingDays") = data.days
		}
		elseif (type = "feedback"){
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingStudentsFeedBack") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingStudentsFeedBack") = $ZCONVERT(data.msg, "I","UTF8")
		}
		elseif (type = "teacher"){
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingTeacher") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingTeacher") = $ZCONVERT(data.msg, "I","UTF8")
			set ^Settings("Stc", "TeacherAutoMailingDays") = data.days			
		}
		elseif (type = "curator"){
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToTrainingCurator") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToTrainingCurator") = $ZCONVERT(data.msg, "I","UTF8")
			set ^Settings("Stc", "CuratorAutoMailingDays") = data.days
		}
		elseif (type = "registration"){
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgSubjectToNewTrainingStudent") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToNewTrainingStudent") = $ZCONVERT(data.msg, "I","UTF8")	
		}
		elseif (type = "order"){
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"emailSubject") = $ZCONVERT(data.subj, "I","UTF8")
			set ^CacheMsg("Stc",##class(%MessageDictionary).GetSessionLanguage(),"msgToCompanyContact") = $ZCONVERT(data.msg, "I","UTF8")	
		}
		
		TCOMMIT	
	}
	catch ex {
		TROLLBACK
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetMailPreview">
<ClassMethod>1</ClassMethod>
<FormalSpec>type</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		&sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
		
		if (##class(Stc.Data.Training).%ExistsId(92)=1){
			set training = ##class(Stc.Data.Training).%OpenId(92)
		}
		else{
			&sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
			set training = ##class(Stc.Data.Training).%OpenId(lastId)
		}
		
		set (subj,msg) = ""
			
		if (type = "registration"){
			set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToNewTrainingStudent")
			set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToNewTrainingStudent"),
						$ZDATE(training.DateStart, 3),
						training.Course.Name.Value,
						training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value,
						training.Street.Value,
						training.Room,
						$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
						training.Teacher.LastName.Value_" "_training.Teacher.FirstName.Value,
						training.OtherInfo.Value)
		}
		elseif (type = "reminder"){
			set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudents")
			set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudents"),
						$ZDATE(training.DateStart, 3),
						training.Course.Name.Value,
						training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value,
						training.Street.Value,
						training.Room,
						$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
						training.Teacher.LastName.Value_" "_training.Teacher.FirstName.Value,
						training.OtherInfo.Value)
		}
		elseif (type = "feedback"){
			set url = $GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp?urlData=feedback-q-id-eq-%1-and-code-eq-%2"
		
			set tempUrl = $replace(url, "%1", training.%Id())
			set tempUrl = $replace(tempUrl, "%2", $p(training.AccessCode,"-",1)_"-"_$p(training.AccessCode,"-",5))
			
			set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudentsFeedBack")
			set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudentsFeedBack"),
							tempUrl,
							training.Course.Name.Value)
			
		}
		elseif (type = "curator"){
			set url = $GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp?urlData=trainingstudents-q-id-eq-%1-and-code-eq-%2"
			
			set tempUrl = $replace(url, "%1", training.%Id())
			set tempUrl = $replace(tempUrl, "%2", training.AccessCode)
			
			set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingCurator")
			set msg =  ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToTrainingCurator"),
							tempUrl,
							$ZDATE(training.DateStart, 3),
							$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
							training.Course.Name.Value,
							training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value,
							training.Street.Value,
							training.Room,
							training.Teacher.FullName_", "_training.Teacher.Phone_", "_training.Teacher.Email_training.Teacher.Skype,
							training.OtherInfo.Value)
		}
		elseif (type = "teacher"){
			set url = $GET(^Settings("Stc", "DomainName"), "-")_$GET(^Settings("Stc", "WebApp"), "-")_"/stc/index.csp?urlData=trainingstudents-q-id-eq-%1-and-code-eq-%2"
			
			set tempUrl = $replace(url, "%1", training.%Id())
			set tempUrl = $replace(tempUrl, "%2", training.AccessCode)
			
			set curatorData = ""
			if (training.CuratorFullName.Value '= ""){
				set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_training.CuratorFullName.Value_", "_training.CuratorEmail_", "_training.CuratorPhoneSecret
			
				if (training.OtherInfo.Value '= ""){
					set curatorData = "<br>"_curatorData
				}
			}
			
			set subj = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingTeacher")
			set msg =  ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToTrainingTeacher"),
							tempUrl,
							$ZDATE(training.DateStart, 3),
							$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
							training.Course.Name.Value,
							training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value,
							training.Street.Value,
							training.Room,
							training.OtherInfo.Value,
							curatorData)
							
							
		}
		elseif (type = "order"){
			set domainWebApp = $GET(^Settings("Stc", "DomainName"))_$GET(^Settings("Stc", "WebApp")) 
			// 1 - Курс,  2 - домен для системы, 3 - код доступа к заявкe
			set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("msgToCompanyContact"), training.Course.Name.Value, domainWebApp, training.AccessCode)
			set subj = ##class(Stc.Utils.Msg).GetMsg("emailSubject")
		}
		
		
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.preview = subj_"<br><br>"_msg
		do proxy.%ToJSON()
	}	
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GetGooglePreview">
<ClassMethod>1</ClassMethod>
<FormalSpec>type</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status  = $$$OK

	try{
		&sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
		
		if (##class(Stc.Data.Training).%ExistsId(92)=1){
			set training = ##class(Stc.Data.Training).%OpenId(92)
		}
		else{
			&sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
			set training = ##class(Stc.Data.Training).%OpenId(lastId)
		}
		
		set msg = ""
		
		if (type = "calendar"){
			set domainWebApp = %request.CgiEnvs("HTTP_HOST")_$GET(^Settings("Stc", "WebApp")) 
			set curatorData = ""
			if (training.CuratorFullName.Value '= ""){
				set curatorData = "<br>"_##class(Stc.Utils.Msg).GetMsg("contactPerson")_":<br>"_training.CuratorFullName.Value
				if (training.CuratorPhone '= ""){
					set curatorData = curatorData_", "_training.CuratorPhone
				}
				set curatorData = curatorData_"<br>"
			}
				
			set otherInfoData = ""
			if (training.OtherInfo.Value '= ""){
				set otherInfoData = "<br>"_training.OtherInfo.Value
			}
				
			set msg = ##class(%MessageDictionary).FormatText(##class(Stc.Utils.Msg).GetMsg("CalendarEvent"),
									training.Course.ProgramUrl,
									domainWebApp,
									training.%Id(),
									training.City.Name.Value_", "_training.City.ParentRegion.Name.Value_", "_training.City.ParentRegion.ParentRegion.Name.Value_"<br>"_training.Street.Value_", "_training.Room,
									training.Teacher.LastName.Value_" "_training.Teacher.FirstName.Value_" "_training.Teacher.MiddleName.Value_"<br>"_training.Teacher.Email,
									$e(##class(%Library.Time).LogicalToDisplay(training.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(training.TimeFinish), 1, 5),
									curatorData,
									otherInfoData)
		}	
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.preview = msg
		do proxy.%ToJSON()
	}	
	catch ex {
		set status = ex.AsStatus()
	}
	
	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ==================================== OTHER ==================================== 

]]></Content>
</UDLText>

<Method name="CheckAdmin">
<Description>
Check access, authorization call, if needed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (isLogin = 1){
		if (##class(Stc.Data.Person).CheckDeletePrivilege() = $$$OK){
			w "{""privileges"":""all""}"
		}
		else{
			w "{""privileges"":""read""}"
		}
		q $$$OK
	}

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

	do %session.Logout()	
 	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
