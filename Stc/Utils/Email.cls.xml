<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Utils.Email">
<Description>
Working with email</Description>
<TimeCreated>63098,81612.618657</TimeCreated>

<Method name="GetMailForTrainingStudents">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте! Напоминаем Вам о предстоящем обучении.<br>"_
		"Дата начала обучения: %1, время: %2<br>"_
		"Курс: %3<br>"_
		"Город: %4<br>"_
		"Адрес: %5<br>"_
		"Преподаватель: %6<br>"_
		"%7%8<br>"_
		"На обучение обязательно возьмите с собой ноутбук с ОС Windows (любой) или виртуальной машиной Windows."
	*/
	
	set pattern = ..GetEmailPattern("students")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
		
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, time, courseName, cityFullName, address, teacherData, curatorData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingOrders">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте!<br>"_
		"Дата начала обучения: %1, время: %2<br>"_
		"Курс: %3<br>"_
		"Город: %4<br>"_
		"Адрес: %5<br>"_
		"Преподаватель: %6<br>"_
		"%7%8<br>"_
		"Для регистрации перейдите по <a href='http://%9'>ссылке</a>."
	*/
	
	set pattern = ..GetEmailPattern("orders")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
	
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/order"
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, time, courseName, cityFullName, address, teacherData, curatorData, otherInfo, url)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingTeacher">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте!<br>"_
		"Перейдите по <a href='http://%1'>ссылке</a> для просмотра списка слушателей курса.<br>"_
		"Дата начала обучения: %2, время: %3<br>"_
		"Курс: %4<br>"_
		"Город: %5<br>"_
		"Адрес: %6<br>"_
		"%7%8"
	*/
	
	set pattern = ..GetEmailPattern("teacher")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value	
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
			
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, url, dateStart, time, courseName, cityFullName, address, curatorData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingCurator">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте!<br>"_
		"Перейдите по <a href='http://%1'>ссылке</a> для просмотра списка слушателей курса.<br>"_
		"Дата начала обучения: %2, время: %3<br>"_
		"Курс: %4<br>"_
		"Город: %5<br>"_
		"Адрес: %6<br>"_
		"Преподаватель: %7<br>"_	
		"%8"
	*/
	
	set pattern = ..GetEmailPattern("curator")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}	
	
	set teacherData = tr.Teacher.FullName_", "_tr.Teacher.Phone_", "_tr.Teacher.Email_", "_tr.Teacher.Skype
	
	set otherInfo = ""
	if (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}		
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, url, dateStart, time, courseName, cityFullName, address, teacherData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingFeedBack">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте!<br>"_
		"Перейдите по <a href='http://%1'>ссылке</a> для заполнения анкеты, там вы можете оставить свои замечания и предложения по пройденному курсу - '%2'"
	*/
	
	set pattern = ..GetEmailPattern("feedback")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/feedback/"_$p(tr.AccessCode,"-",1)_"-"_$p(tr.AccessCode,"-",5)
	set courseName = tr.Course.Name.Value
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, url, courseName)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingRegistration">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		"Здравствуйте! Ваша заявка на обучение принята.<br>"_
		"Дата начала обучения: %1, время: %2<br>"_
		"Курс: %3<br>"_
		"Город: %4<br>"_
		"Адрес: %5<br>"_
		"Преподаватель: %6<br>"_
		"%7%8"
	*/
	
	set pattern = ..GetEmailPattern("registration")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
	
		
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, time, courseName, cityFullName, address, teacherData, curatorData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForMailingGroups">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/*
		"Здравствуйте!<br>"_
		"Дата начала обучения: %1, время: %2<br>"_
		"Курс: %3<br>"_
		"Город: %4<br>"_
		"Адрес: %5<br>"_
		"Преподаватель: %6<br>"_
		"%7%8<br>"_
		"Для регистрации перейдите по <a href='http://%9'>ссылке</a>."
	*/
	
	set pattern = ..GetEmailPattern("mailinggroups")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
	
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/order"
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, time, courseName, cityFullName, address, teacherData, curatorData, otherInfo, url)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForMailingSubscriber">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/*
		"Здравствуйте!<br>"_
		"Дата начала обучения: %1, время: %2<br>"_
		"Курс: %3<br>"_
		"Город: %4<br>"_
		"Адрес: %5<br>"_
		"Преподаватель: %6<br>"_
		"%7%8<br>"_
		"Для регистрации перейдите по <a href='http://%9'>ссылке</a>."_
		"---<br>"_	
		"Для того, чтобы отписаться от почтовых уведомлений перейдите по <a target='_blank' href='%10%accessCode'>ссылке</a>."
	*/
	
	set pattern = ..GetEmailPattern("mailingsubscriber")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set address = tr.Street.Value
	if (tr.Room '= "-") && (tr.Room '= ""){
		set address = address_". "_tr.Room
	}
	
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	
	set curatorData = ""
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value
		
		if (tr.CuratorEmail '= ""){
			set curatorData = curatorData_", "_tr.CuratorEmail
		}
		
		if (tr.CuratorPhone '= ""){
			set curatorData = curatorData_", "_tr.CuratorPhone
		}
		
	}
	
	set otherInfo = ""
	if (curatorData '= "") && (tr.OtherInfo.Value '= ""){
		set otherInfo = "<br>"_##class(Stc.Utils.Msg).GetMsg("OtherInfo")_": "_tr.OtherInfo.Value_"<br>"	 
	}
	
	set urlJoin = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/order"
	
	set urlUnsubscribe = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/mailing/subscription/"	  
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, time, courseName, cityFullName, address, teacherData, curatorData, otherInfo, urlJoin, urlUnsubscribe)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForOrderApply">
<ClassMethod>1</ClassMethod>
<FormalSpec>ord:Stc.Data.Order</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/*
		"Здравствуйте!<br>"_
		"Ваша заявка на обучение по курсу '%1' принята."
	*/
	
	set pattern = ..GetEmailPattern("orderapply")
	set courseName = ord.Course.Name.Value
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, courseName)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForConfirmationSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>mItem:Stc.Data.MailingItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
		Здравствуйте, для активации подписки перейдите по <a href='%1' target='_blank'>ссылке</a>.
	*/
	
	set pattern = ..GetEmailPattern("confirmsubscription")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/mailing/subscription/confirmation/"_$system.Encryption.Base64Encode(mItem.AccessCode)
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, url)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "students"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Students")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Students")
	}
	elseif (type = "teacher"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Teacher")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Teacher")
	}
	elseif (type = "curator"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Curator")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Curator")
	}
	elseif (type = "feedback"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-FeedBack")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-FeedBack")
	}
	elseif (type = "orders"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Orders")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Orders")
	}
	elseif (type = "registration"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Registration")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Registration")
	}
	elseif (type = "mailinggroups"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Mailing-Groups")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Mailing-Groups")
	}
	elseif (type = "mailingsubscriber"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Mailing-Subscriber")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Mailing-Subscriber")
	}
	elseif (type = "orderapply"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Order-Apply")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Order-Apply")
	}
	elseif (type = "confirmsubscription"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Confirmation-Subscription")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Confirmation-Subscription")
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="SetMailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,subject:%String,message:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "students"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Students", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Students", message)
	}
	elseif (type = "teacher"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Teacher", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Teacher", message)
	}
	elseif (type = "curator"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Curator", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Curator", message)
	}
	elseif (type = "feedback"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-FeedBack", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-FeedBack", message)
	}
	elseif (type = "orders"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Orders", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Orders", message)
	}
	elseif (type = "registration"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Registration")
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Registration", message)
	}
	elseif (type = "mailinggroups"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Mailing-Groups", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Mailing-Groups", message)
	}
	elseif (type = "mailingsubscriber"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Mailing-Subscriber", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Mailing-Subscriber", message)
	}
	elseif (type = "orderapply"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Order-Apply", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Order-Apply", message)
	}
	elseif (type = "confirmsubscription"){
		do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Confirmation-Subscription", subject)
		do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Confirmation-Subscription", message)
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Send">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,subject:%String,msg:%String,recipientName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($FIND(email, "ilson") = 0){
		set email = "stc_testmail@mail.ru"
	}
	
	set st = $$$OK
	
	try
	{
		set mail=##class(%Net.MailMessage).%New()
    	set mail.From = ##class(Stc.Data.Settings).GetEmailFrom()
    	set mail.Subject = subject
    	set mail.Charset = "utf-8"
    	set mail.IsHTML = 1
    	set mail.ContentType = "text/html"
    	do mail.TextData.Write(msg)
    	
	    do mail.To.Insert(email)
	    
    	set auth=##class(%Net.Authenticator).%New()
   		set auth.MechanismList = "LOGIN"
  		set auth.UserName = ##class(Stc.Data.Settings).GetEmailSMTPUser()
  		set auth.Password = ##class(Stc.Data.Settings).GetEmailSMTPPassword()
  	
  		set smtp = ##class(%Net.SMTP).%New()
    	set smtp.smtpserver = ##class(Stc.Data.Settings).GetEmailSMTPServer()
    	set smtp.port = ##class(Stc.Data.Settings).GetEmailSMTPPort()
  		set smtp.authenticator = auth
  	
    	$$$THROWONERROR(st, smtp.Send(mail))
    	
    	do ##class(Stc.Data.MailingJournal).Create(email, recipientName, subject, msg)
	}
	catch (ex){
		set st = ex.AsStatus()
  	}
  	
	quit st
]]></Implementation>
</Method>
</Class>
</Export>
