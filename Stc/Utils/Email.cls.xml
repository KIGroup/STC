<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Utils.Email">
<Description>
Working with email</Description>
<TimeCreated>63098,81612.618657</TimeCreated>

<Method name="GetMailForStudents">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		Здравствуйте!<br>
		Дата начала обучения: %1, время: %6<br>
		Курс: %2<br>
		Город: %3<br>
		Адрес: %4%5<br>
		Преподаватель: %7<br>
		%8
	*/
	
	set pattern = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudents")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set street = tr.Street.Value
	set room = " "_tr.Room
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email							
	set otherInfo = tr.OtherInfo.Value
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudents")
	set mail.message = ##class(%MessageDictionary).FormatText(pattern, dateStart, courseName, cityFullName, street, room, time, teacherData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTeacher">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		Здравствуйте!<br>
		Перейдите по <a href='http://%1'>ссылке</a> для просмотра списка слушателей курса.<br>
		Дата начала обучения: %2, время: %3<br>
		Курс: %4<br>
		Город: %5<br>
		Адрес: %6%7<br>
		%8<br>
		%9
	*/
	
	set pattern = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingTeacher")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode
	set dateStart = $ZDATE(tr.DateStart, 3)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set street = tr.Street.Value
	set room = tr.Room
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set otherInfo = tr.OtherInfo.Value	
	set curatorData = ""
			
	if (tr.CuratorFullName.Value '= ""){
		set curatorData = ##class(Stc.Utils.Msg).GetMsg("Curator")_": "_tr.CuratorFullName.Value_", "_tr.CuratorEmail_", "_tr.CuratorPhoneSecret
			
		if (tr.OtherInfo.Value '= ""){
			set curatorData = "<br>"_curatorData
		}
	}
			
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingTeacher")
	set mail.message = ##class(%MessageDictionary).FormatText(pattern, url, dateStart, time, courseName, cityFullName, street, room, otherInfo, curatorData)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForCurator">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		Здравствуйте!<br>
		Перейдите по <a href='http://%1'>ссылке</a> для просмотра списка слушателей курса.<br>
		Дата начала обучения: %2, время: %3<br>
		Курс: %4<br>
		Город: %5<br>
		Адрес: %6%7<br>
		Преподаватель: %8<br>
		%9
	*/
	
	set pattern = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingCurator")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode
	set dateStart = $ZDATE(tr.DateStart, 3)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set street = tr.Street.Value
	set room = tr.Room
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set otherInfo = tr.OtherInfo.Value	
	set teacherData = tr.Teacher.FullName_", "_tr.Teacher.Phone_", "_tr.Teacher.Email_", "_tr.Teacher.Skype
			
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingTeacher")
	set mail.message = ##class(%MessageDictionary).FormatText(pattern, url, dateStart, time, courseName, cityFullName, street, room, teacherData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForFeedBack">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		Здравствуйте!<br>
		Перейдите по <a href='http://%1'>ссылке</a> для заполнения анкеты, там вы можете оставить свои замечания и предложения по пройденному курсу - '%2'
	*/
	
	set pattern = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudentsFeedBack")
	set url = ##class(Stc.Data.Settings).GetWebAppDomain()_"/stc/index.csp#/training/"_tr.%Id()_"/feedback/"_$p(tr.AccessCode,"-",1)_"-"_$p(tr.AccessCode,"-",5)
	set courseName = tr.Course.Name.Value
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudentsFeedBack")
	set mail.message = ##class(%MessageDictionary).FormatText(pattern, url, courseName)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetMailForRegistration">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/* 
		Здравствуйте! Ваша заявка на обучение принята.<br>
		Дата начала обучения: %1, время: %6<br>
		Курс: %2<br>
		Город: %3<br>
		Адрес: %4%5<br>
		Преподаватель: %7<br>
		%8
	*/
	
	set pattern = ..GetEmailPattern("registration")
	set dateStart = $ZDATE(tr.DateStart, 3)
	set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
	set courseName = tr.Course.Name.Value
	set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
	set street = tr.Street.Value
	set room = tr.Room
	set teacherData = tr.Teacher.FullName_", "_tr.Teacher.Phone_", "_tr.Teacher.Email_", "_tr.Teacher.Skype
	set otherInfo = tr.OtherInfo.Value	
	
	set mail = ##class(%ZEN.proxyObject).%New()
	set mail.subject = pattern.subject
	set mail.message = ##class(%MessageDictionary).FormatText(pattern.message, dateStart, courseName, cityFullName, street, room, time, teacherData, otherInfo)
	
	quit mail
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "students"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudents")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudents")
	}
	elseif (type = "teacher"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingTeacher")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingTeacher")
	}
	elseif (type = "curator"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingCurator")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingCurator")
	}
	elseif (type = "feedback"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToTrainingStudentsFeedBack")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("msgToTrainingStudentsFeedBack")
	}
	elseif (type = "registration"){
		set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("msgSubjectToNewTrainingStudent")
		set proxy.message = ##class(Stc.Utils.Msg).GetMsg("msgToNewTrainingStudent")
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="SetMailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,subject:%String,message:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	if (type = "students"){
		do ##class(Stc.Utils.Msg).SetMsg("msgSubjectToTrainingStudents", subject)
		do ##class(Stc.Utils.Msg).SetMsg("msgToTrainingStudents", message)
	}
	elseif (type = "teacher"){
		do ##class(Stc.Utils.Msg).SetMsg("msgSubjectToTrainingTeacher", subject)
		do ##class(Stc.Utils.Msg).SetMsg("msgToTrainingTeacher", message)
	}
	elseif (type = "curator"){
		do ##class(Stc.Utils.Msg).SetMsg("msgSubjectToTrainingCurator", subject)
		do ##class(Stc.Utils.Msg).SetMsg("msgToTrainingCurator", message)
	}
	elseif (type = "feedback"){
		do ##class(Stc.Utils.Msg).SetMsg("msgSubjectToTrainingStudentsFeedBack", subject)
		do ##class(Stc.Utils.Msg).SetMsg("msgToTrainingStudentsFeedBack", message)
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Send">
<ClassMethod>1</ClassMethod>
<FormalSpec>email,subject:%String,msg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set email = "stc_testmail@mail.ru"
	
	set status = $$$OK
	
	try
	{
		set mail=##class(%Net.MailMessage).%New()
    	set mail.From = ##class(Stc.Data.Settings).GetEmailFrom()
    	set mail.Subject = subject
    	set mail.Charset = "utf-8"
    	set mail.IsHTML = 1
    	set mail.ContentType = "text/html"
    	do mail.TextData.Write(msg)
    	
    	if ($CLASSNAME(email) = "%Library.ListOfDataTypes"){
    		for i=1:1:email.Count(){
	    		do mail.To.Insert(email.GetAt(i))
	    		do ##class(Stc.Utils.Log).Create("Email", "["_i_"] Subject = "_subject_"; Email = "_email.GetAt(i)_"; Msg = "_msg)
    		}
    	}
    	else{
	    	do mail.To.Insert(email)
	    	do ##class(Stc.Utils.Log).Create("Email", "Subject = "_subject_"; Email = "_email_"; Msg = "_msg)
    	}
    	
    	set auth=##class(%Net.Authenticator).%New()
   		set auth.MechanismList = "LOGIN"
  		set auth.UserName = ##class(Stc.Data.Settings).GetEmailSMTPUser()
  		set auth.Password = ##class(Stc.Data.Settings).GetEmailSMTPPassword()
  	
  		set smtp = ##class(%Net.SMTP).%New()
    	set smtp.smtpserver = ##class(Stc.Data.Settings).GetEmailSMTPServer()
    	set smtp.port = ##class(Stc.Data.Settings).GetEmailSMTPPort()
  		set smtp.authenticator = auth
  	
    	$$$THROWONERROR(status, smtp.Send(mail))
	}
	catch (ex){
		set status = ex.AsStatus()
  	}
  	
	quit status
]]></Implementation>
</Method>
</Class>
</Export>
