<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Utils.TaskAutoMailing">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63231,11522.229906</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This method is responsible for executing the task.<br>
At the scheduled time, the Task Manager creates an instance of this object,
sets any property values using the stored "settings" for the task, and then
invokes this method to execute the task.<br>
In order to execute a real task, override this method in a subclass.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Main()
]]></Implementation>
</Method>

<Method name="Main">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..StudentsAutoMailing()
	
	do ..TeacherAutoMailing()
	
	do ..CuratorAutoMailing()
	
	do ..FeedBackAutoMailing()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="StudentsAutoMailing">
<Description>
Send notification to all students in the training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set diffDays = ##class(Stc.Data.Settings).GetMailingStudentsDays()
			
		&sql(DECLARE TrCur CURSOR FOR 
				SELECT ID
			 	FROM Stc_Data.Training
			 	WHERE IsStudentsAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)	
			
		&sql(OPEN TrCur)
		for  
		{	
			&sql(FETCH TrCur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing StudentsAutoMailing()", "Start; TrID="_trId)
			
			set tr = ##class(Stc.Data.Training).%OpenId(trId)
			set mail = ##class(Stc.Utils.Email).GetMailForStudents(tr)
			
			set emailList = ..GetStudentEmails(trId)
			if (emailList.Count() '= 0){
				set st = ##class(Stc.Utils.Email).Send(emailList, mail.subject, mail.message)
				
				if $$$ISOK(st){
					set tr.IsStudentsAutoMailing = 0
					do tr.%Save()
				}
			}						
		}
			
		&sql(CLOSE TrCur)		
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing StudentsAutoMailing() Catch", st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="TeacherAutoMailing">
<Description>
Send notification to training teacher</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set diffDays = ##class(Stc.Data.Settings).GetMailingTeacherDays()
		
		&sql(DECLARE Tr2Cur CURSOR FOR 
				SELECT ID
			 	FROM Stc_Data.Training
			 	WHERE IsTeacherAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)	
			
		&sql(OPEN Tr2Cur)
		for  
		{	
			&sql(FETCH Tr2Cur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing()", "Start; TrID="_trId)
			
			set tr = ##class(Stc.Data.Training).%OpenId(trId)
				
			set mail = ##class(Stc.Utils.Email).GetMailForTeacher(tr)
					
			set st = ##class(Stc.Utils.Email).Send(tr.Teacher.Email, mail.subject, mail.message)	
			if $$$ISOK(st){
				set tr.IsTeacherAutoMailing = 0
				do tr.%Save()
			}						
		}
			
		&sql(CLOSE Tr2Cur)
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing() Catch", st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="CuratorAutoMailing">
<Description>
Send notification to training curator</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set diffDays = ##class(Stc.Data.Settings).GetMailingCuratorDays()
			
		&sql(DECLARE Tr3Cur CURSOR FOR 
				SELECT ID
			 	FROM Stc_Data.Training
			 	WHERE IsCuratorAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)	
			
		&sql(OPEN Tr3Cur)
		for  
		{	
			&sql(FETCH Tr3Cur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CuratorAutoMailing()", "Start; TrID="_trId)
			
			set tr = ##class(Stc.Data.Training).%OpenId(trId)
			
			set mail = ##class(Stc.Utils.Email).GetMailForCurator(tr)
					
			set st = ##class(Stc.Utils.Email).Send(tr.CuratorEmail, mail.subject, mail.message)
			if $$$ISOK(st){
				set tr.IsCuratorAutoMailing = 0
				do tr.%Save()
			}						
		}
			
		&sql(CLOSE Tr3Cur)
	
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CuratorAutoMailing() Catch", st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="FeedBackAutoMailing">
<Description>
Send feedback link to students in the training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		&sql(DECLARE Tr4Cur CURSOR FOR 
				SELECT ID
			 	FROM Stc_Data.Training
			 	WHERE IsFeedBackAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateFinish) = 0)	
			
		&sql(OPEN Tr4Cur)
		for  
		{	
			&sql(FETCH Tr4Cur INTO :trId) 
			quit:(SQLCODE '= 0)
			
			do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing FeedBackAutoMailing()", "Start; TrID="_trId)
			
			set tr = ##class(Stc.Data.Training).%OpenId(trId)
			
			set mail = ##class(Stc.Utils.Email).GetMailForFeedBack(tr)
					
			set emailList = ..GetStudentEmails(trId)
			if (emailList.Count() > 0){
				set st = ##class(Stc.Utils.Email).Send(emailList, mail.subject, mail.message)

				if $$$ISOK(st){
					set tr.IsFeedBackAutoMailing = 0
					do tr.%Save()
				}
			}								
		}
			
		&sql(CLOSE Tr4Cur)
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing FeedBackAutoMailing() Catch", st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetStudentEmails">
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set emailList = ##class(%ListOfDataTypes).%New()
		
	&sql(DECLARE StudCur CURSOR FOR 
		 	 	SELECT Students->Email 
		 	 	FROM Stc_Data.SubGroup_Students
		 	 	WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trId))	
	&sql(OPEN StudCur)
	for  
	{	
		&sql(FETCH StudCur INTO :email) 
		quit:(SQLCODE '= 0)
			
		do emailList.Insert(email)		
	}
	&sql(CLOSE StudCur)

	quit emailList
]]></Implementation>
</Method>
</Class>
</Export>
