<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="stc/js/controllers/AllOrdersCtrl.js" application="/csp/stc/" default="1"><![CDATA[
'use strict';
//dddddddcdcd
 
/*===========================================================================================
Все заявки
===========================================================================================*/

controllersModule.controller('AllOrdersCtrl', function($scope, $cookieStore, $location, $routeParams, $filter, OrderSrvc, UtilsSrvc, RegionSrvc, CourseTeacherSrvc, TrainingSrvc, CompanySrvc, PersonSrvc){
    $scope.menu.selectMenu('orders');
    if (!$scope.pageStore.orders)
        $scope.pageStore.orders = {grid:{}};

    $scope.order = {};
	if ($scope.menu.readOnlyMode){
		$scope.order.secondRowActionIcon = '';
	}
	else{
		$scope.order.secondRowActionIcon = 'icon-remove';
	}
	
   
    $scope.order.init = function(){
        $scope.order.columns = [
                          {name: 'Курс',          sqlName: 'Course->Name->Value',       isSorted: false, isSortable: true, isDown: true,  isSearched: true,  isSearchable: true},
                          {name: 'Организация',   sqlName: 'Company->ShortName->Value', isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: true},
                          {name: 'Слушатели',     sqlName: 'StudentsNumber',     isSorted: false, isSortable: false,isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Дата создания', sqlName: 'CreatedTS',          isSorted: true,  isSortable: true, isDown: false, isSearched: false, isSearchable: false, filter: 'date'},
                          {name: 'Статус',        sqlName: 'OrderStatus',        isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: false}];
        
        $scope.order.properties = [{name:'course.name'}, 
                                   {name:'contact.company.shortName'},
                                   {name:'studentsNumberString', 
                                   	   calculate: function(item){
	                                   	   if (item.status.code == 'Closed'){
	                                   	    	item.studentsNumberString = '-';
	                                   	   }
	                                   	   else{
		                                   	   item.studentsNumberString = item.studentsNumber;
	                                   	   }
	                                   }}, 
                                   {name:'createdTS', filter: 'date', filterParam: $filter('localize')('d MMMM y, HH:mm:ss')}, 
                                   {name:'status.name', getCssClass: function(item){
                                        var code = UtilsSrvc.getPropertyValue(item, 'status.code');
                                        
                                        var css = 'label';

                                        if (code == 'New')
                                            css += ' label-important';
                                        if (code == 'Approved')
                                            css += ' label-info';
                                        if (code == 'Closed')
                                            css += ' label-inverse';

                                        return css;
                                        }}];
        $scope.order.status = UtilsSrvc.getPropertyValue($scope.pageStore, 'orders.status', 'All');
        $scope.order.pageSize = UtilsSrvc.getPropertyValue($scope.pageStore, 'orders.grid.pageSize', 10);
        $scope.order.pageCurr = UtilsSrvc.getPropertyValue($scope.pageStore, 'orders.grid.pageCurr', 1);
        $scope.order.itemsTotal = 0;
        $scope.order.selectedItems = [];
        $scope.order.multiSelectMode = false;
        $scope.order.forciblyUpdate = 0;
        $scope.order.actionColumnVisible = true;
    };

    // order
    // Загрузка заявок
    $scope.order.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        OrderSrvc.getOrders(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, $scope.order.status).then(
            function(data){
                $scope.order.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.order.itemsTotal = data.itemsTotal;
                $scope.order.items = data.items;

                if ($scope.order.selectedItems && $scope.order.items && $scope.order.selectedItems.length == 0 && $scope.order.items.length != 0){
                    $scope.order.selectedItems[0] = $scope.order.items[0];
                    $scope.order.selectedItems[0].rowClass = 'info';
                }

                $scope.order.contactType='order';
            },
            function(response){
                $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    $scope.$watch('order.status', function(){
	    $scope.order.forciblyUpdate++;
        $scope.pageStore.orders.status = $scope.order.status;
    });

    // Открыть заявку
    $scope.order.open = function(item){
        if (item.status.code == 'New'){
       		UtilsSrvc.openCustomMessageBox('Открыть заявку', "'Новые' заявки нельзя открывать для просмотра и редактирования.", [{result: '1', label: 'Ок', cssClass: 'btn-primary btn-small'}]);
            return;
        }
        
        $location.path('/updateorder').search({code: item.code});
    };

	// Принять заявку
    $scope.order.accept = function(){
        function acceptOrder(sendEmail){
            OrderSrvc.createApprovedOrder($scope.order.selectedItems[0].id, sendEmail).then(
                function(data){
                    $scope.order.selectedItems = [];
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', 'Заявка одобрена.', 'success', true);
                    $scope.order.forciblyUpdate++;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
        };

        function createCompany(){
            $location.path('/company').search({order: $scope.order.selectedItems[0].id});
        };

        if ($scope.order.selectedItems[0].contact.company.id){
            acceptOrder(0);
        }
        else {
            UtilsSrvc.openMessageBox('Принять заявку', 'Организация, указанная в заявке, не существует. Создать ее?', createCompany);
        }
    };

    // order
    // Отправить код доступа
    $scope.order.sendEmail = function(){
        function sendEmail(){
            OrderSrvc.sendEmail($scope.order.selectedItems[0].code).then(
                function(data){
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', 'Контакту на почту был выслан код доступа к заявке.', 'success', true);
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
        };

        UtilsSrvc.openMessageBox('Отправить письмо', "Отправить контактному лицу на email код доступа к заявке, чтобы завершить заполнение?", sendEmail);    
    };

    // Удалить заявку
    $scope.order.deleteOrder = function(item){
        function deleteOrder(){
            OrderSrvc.deleteOrder(item.id).then(
                function(data){
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', 'Заявка удалена.', 'success', true);
                    $scope.order.selectedItems = [];
                    $scope.order.forciblyUpdate++;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Удалить заявку', $filter('localize')("Удалить заявку от организации") + " '" + item.contact.company.shortName + "'?", deleteOrder);    
    };

    // Обновить или заменить контакт компании  
    $scope.order.changeCompanyContact = function(isReplace){
        var msgSuccess = 'Контакт заменен.';
        var msgWindow = ['Заменить контакт', 'Заменить контакт организации контактом из заявки? Старый контакт организации не будет удален.'];

        if (!isReplace){
            msgSuccess = 'Контакт обновлен.';
            msgWindow = ['Обновить контакт', 'Заменить данные контакта организации данными контакта из заявки?'];
        }
        
        function resolve(){
            PersonSrvc.changeCompanyContact({contact: $scope.order.selectedItems[0].contact, 
            								 companyId: $scope.order.selectedItems[0].contact.company.id, 
            								 isReplace: isReplace, 
            								 orderId: $scope.order.selectedItems[0].id}).then(
                function(data){
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', msgSuccess, 'success', true);
                    $scope.order.forciblyUpdate++;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
        };

        UtilsSrvc.openMessageBox(msgWindow[0], msgWindow[1], resolve);
    };

    $scope.order.openChangeCompanyDialog = function(){
        if (!$scope.order.companies || $scope.order.companies.length==0){
            CompanySrvc.getAllCompaniesShortInfo().then(
                function(data){
                    $scope.order.companies = data;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
        }
		
        $('#ChangeCompanyModal').modal('show');
        $scope.order.modalChangeCompanyVisible = true;
    };
    
    
    $scope.order.closeOrder = function(){
         OrderSrvc.closeOrder($scope.order.selectedItems[0].id).then(
                function(data){
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', 'Статус заявки изменен.', 'success', true);
                    $scope.order.selectedItems = [];
                    $scope.order.forciblyUpdate++;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
    };

    $scope.order.changeCompany = function(){
        $scope.order.modalChangeCompanyVisible = false;
        if (!$scope.order.newOrderCompany || !$scope.order.newOrderCompany.id){
            console.log($scope.order.newOrderCompany);
            return;
        }
        
        OrderSrvc.changeOrderCompany($scope.order.selectedItems[0].id, $scope.order.newOrderCompany.id).then(
                function(data){
                    $scope.order.alert = UtilsSrvc.getAlert('Готово!', 'Произошла смена организации в заявке.', 'success', true);
                    //$scope.order.selectedItems = [];
                    $scope.order.forciblyUpdate++;
                },
                function(response){
                    $scope.order.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
    };


    

    $scope.order.init();
  });

]]></CSP>
</Export>
