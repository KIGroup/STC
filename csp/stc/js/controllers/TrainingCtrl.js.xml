<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="stc/js/controllers/TrainingCtrl.js" application="/csp/dorabotka/" default="1"><![CDATA[
'use strict';
//djdddddddddd

/*===========================================================================================
Обучение
===========================================================================================*/

controllersModule.controller('TrainingCtrl', function($scope, $route, $location, $filter, $routeParams, UtilsSrvc, OrderSrvc, ReportSrvc, TrainingSrvc, CompanySrvc, PersonSrvc, CertificateSrvc){
    $scope.training = {};
    $scope.sgroup = {contract:{}};
    $scope.cert = {};
    $scope.newstud = {};
    $scope.student = {};
    $scope.allstud = {};
    $scope.other = {};

    if (!$scope.pageStore.training || $scope.pageStore.training.id != $routeParams.id)
        $scope.pageStore.training = {id: $routeParams.id, tabSgActive: false, tabSgStActive: false, tabAllStudActive: false, tabCertsActive: false, tabNewStudActive: false};

    $scope.pageStore.trainingCertificates = {grid:{}};
    $scope.pageStore.newstud = {grid:{}};
    $scope.pageStore.allstud = {grid:{}};

    $scope.other.init = function(){
        //============================== ПОДГРУППЫ ==========================================================================
		    $scope.sgroup.columns = [
                          {name: 'Плательщик',    sqlName: 'SubGroups->Payer->ShortName->Value', isSorted: true,  isSortable: true,   isDown: true, isSearched: true,  isSearchable: true},
                          {name: 'Слушатели',     sqlName: '',                                   isSorted: false, isSortable: false,  isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Сумма к оплате',sqlName: '',                                   isSorted: false, isSortable: false,  isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Валюта',        sqlName: 'SubGroups->Currency->Name->Value',   isSorted: false, isSortable: true,   isDown: true,  isSearched: false, isSearchable: true}];
                          
        $scope.sgroup.properties = [{name:'payer.shortName'}, {name:'students.length'}, {name:'amount'}, {name:'currency.name'}];
        $scope.sgroup.pageSize = 10;
        $scope.sgroup.pageCurr = 1;
        $scope.sgroup.itemsTotal = 0;
        $scope.sgroup.selectedItems = [];
        $scope.sgroup.multiSelectMode = false;
        $scope.sgroup.forciblyUpdate = 0;

        $scope.sgroup.loadCurrencies();
		
        //============================== СЕРТИФИКАТЫ ==========================================================================
        $scope.cert.columns = [
                          {name: 'Курс',          sqlName: 'Training->Course->Name->Value', isSorted: false, isSortable: true, isDown: true,  isSearched: true,  isSearchable: true},
                          {name: 'Номер',         sqlName: 'Number',                        isSorted: true, isSortable: true, isDown: true,  isSearched: false, isSearchable: true},
                          {name: 'Слушатель',     sqlName: 'Student->LastName->Value',      isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: true},
                          {name: 'Компания',      sqlName: '',                              isSorted: false, isSortable: false,isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Дата создания', sqlName: 'CreatedDate',                   isSorted: false,  isSortable: true, isDown: false, isSearched: false, isSearchable: false, filter: 'date'},
                          {name: 'Статус',        sqlName: 'isPrinted',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: true}];
        
        $scope.cert.properties = [{name:'training.course.name'}, 
                                  {name:'number'},
                                  {name:'student.fullName', 
                                  calculate: function(item){
                                                item.student.fullName = item.student.lastName + ' ' + item.student.firstName + ' ' + item.student.middleName;
                                  }}, 
                                  {name:'student.company.shortName'},
                                  {name:'date', filter: 'date', filterParam: $filter('localize')('d MMMM y')}, 
                                  {name:'status', 
                                  getCssClass: function(item){
                                                return 'label ' + (item.isPrinted == 0 ? 'label-important' : 'label-success');
                                              }, 
                                  calculate: function(item){
                                                item.status = item.isPrinted == 1 ? $filter('localize')('Распечатан') : $filter('localize')('Не распечатан');
                                  }}];

        $scope.cert.pageSize = UtilsSrvc.getPropertyValue($scope.pageStore, 'trainingCertificates.grid.pageSize', 15);
        $scope.cert.pageCurr = UtilsSrvc.getPropertyValue($scope.pageStore, 'trainingCertificates.grid.pageCurr', 1);
        $scope.cert.itemsTotal = 0;
        $scope.cert.selectedItems = [];
        $scope.cert.multiSelectMode = false;
        $scope.cert.forciblyUpdate = 0;
        $scope.cert.actionColumnVisible = true;

        $scope.cert.forciblyUpdate++; 

        //============================== НОВЫЕ СЛУШАТЕЛИ ==========================================================================
        $scope.newstud.columns = [
                          {name: 'Фамилия',       sqlName: 'LastName->Value',           isSorted: false, isSortable: true, isDown: true,  isSearched: true, isSearchable: true},
                          {name: 'Имя',           sqlName: 'FirstName->Value',          isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Отчество',      sqlName: 'MiddleName->Value',         isSorted: false, isSortable: true, isDown: true,  isSearched: false, isSearchable: false},
                          {name: 'Компания',      sqlName: 'Company->ShortName->Value', isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Email',         sqlName: 'Email',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Телефон',       sqlName: 'Phone',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Skype',         sqlName: 'Skype',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: false},
                          {name: 'Дата создания', sqlName: 'CreatedTS',                 isSorted: true,  isSortable: true, isDown: false, isSearched: false, isSearchable: false, filter: 'date'}];

        $scope.newstud.properties = [{name:'lastName'}, 
                                     {name:'firstName'},
                                     {name:'middleName'}, 
                                     {name:'company.shortName'},
                                     {name:'email'},
                                     {name:'phone'},
                                     {name:'skype'},
                                     {name:'createdTS', filter: 'date', filterParam: $filter('localize')('d MMMM y, HH:mm:ss')}];

        $scope.newstud.pageSize = UtilsSrvc.getPropertyValue($scope.pageStore, 'newstud.grid.pageSize', 10);
        $scope.newstud.pageCurr = UtilsSrvc.getPropertyValue($scope.pageStore, 'newstud.grid.pageCurr', 1);
        $scope.newstud.itemsTotal = 0;
        $scope.newstud.selectedItems = [];
        $scope.newstud.multiSelectMode = false;
        $scope.newstud.forciblyUpdate = 0;
        $scope.newstud.actionColumnVisible = true;

        $scope.newstud.forciblyUpdate++;
        
        //============================== СТУДЕНТЫ ПОДГРУППЫ ==========================================================================
        $scope.student.columns = [{name: 'Фамилия'}, {name: 'Имя'}, {name: 'Отчество'}, {name: 'Компания'}, {name: 'Email'}, {name: 'Телефон'}, {name: 'Skype'}];
        $scope.student.properties = [{name:'lastName'}, {name:'firstName'}, {name:'middleName'}, {name:'company.shortName'}, {name:'email'}, {name:'phone'}, {name:'skype'}];
        $scope.student.pageSize = 100;
        $scope.student.pageCurr = 1;
        $scope.student.itemsTotal = 0;
        $scope.student.selectedItems = [];
        $scope.student.multiSelectMode = false; 


        //============================== ВСЕ СТУДЕНТЫ ==========================================================================
        $scope.allstud.columns = [
                          {name: 'Фамилия',       sqlName: 'Students->LastName->Value',           isSorted: false, isSortable: true, isDown: true,  isSearched: true,   isSearchable: true},
                          {name: 'Имя',           sqlName: 'Students->FirstName->Value',          isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: false},
                          {name: 'Отчество',      sqlName: 'Students->MiddleName->Value',         isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: false},
                          {name: 'Компания',      sqlName: 'Students->Company->ShortName->Value', isSorted: true,  isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Email',         sqlName: 'Students->Email',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Телефон',       sqlName: 'Students->Phone',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: true},
                          {name: 'Skype',         sqlName: 'Students->Skype',                     isSorted: false, isSortable: true, isDown: true,  isSearched: false,  isSearchable: false}];

        $scope.allstud.properties = [{name:'lastName'}, {name:'firstName'}, {name:'middleName'}, {name:'company.shortName'}, {name:'email'}, {name:'phone'}, {name:'skype'}];
        $scope.allstud.pageSize = 15;
        $scope.allstud.pageCurr = 1;
        $scope.allstud.itemsTotal = 0;
        $scope.allstud.selectedItems = [];
        $scope.allstud.multiSelectMode = false;
        $scope.allstud.forciblyUpdate = 0;
    };

    // Загрузить валюты
    $scope.sgroup.loadCurrencies = function(){
        TrainingSrvc.getCurrencies().then(
            function(data){
                $scope.sgroup.currencies = data;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Загрузить обучение по ИД
    $scope.training.loadData = function(id){
        TrainingSrvc.getTraining(id).then(
            function(data){
                $scope.training.data = data;
                $scope.training.data.notCorrectAddress = data.address.title;
                
        		    $scope.training.dateStart = data.dateStart;
        		    $scope.training.dateFinish = data.dateFinish;
        		
                if (data.isCompleted == 0){
                    $scope.training.btnAdditionName = 'Завершить';
                    $scope.training.btnAdditionAction = $scope.training.complete;
                    $scope.training.btnAdditionVisible = true;
                }
                else{
                    $scope.training.btnAdditionVisible = false;
                }

                $scope.sgroup.forciblyUpdate++;
                $scope.allstud.forciblyUpdate++;
                //$scope.sgroup.loadItems($scope.sgroup.pageCurr, $scope.sgroup.pageSize, "SubGroups->Payer->ShortName->Value", true, "", "");
                //$scope.sgroup.loadItems($scope.sgroup.pageCurr, $scope.sgroup.pageSize, "SubGroups->Payer->ShortName->Value", true, "", "");
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Обновить данные обучения
    $scope.training.save = function(){
	    TrainingSrvc.saveTraining($scope.training.data).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Изменения сохранены.', 'success', true);
                $scope.trainingForm.$setPristine();
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Завершить обучение и создать сертификаты
    $scope.training.complete = function(){
        TrainingSrvc.completeTraining($scope.training.data.id).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Обучение завершено.', 'success', true);
               	$route.reload();
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Загрузить подгруппы
    $scope.sgroup.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        TrainingSrvc.getTrainingSubGroups(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, $routeParams.id).then(
            function(data){
                $scope.sgroup.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.sgroup.itemsTotal = data.itemsTotal;
                $scope.sgroup.items = data.items;

                if ($scope.sgroup.selectedItems && $scope.sgroup.items && $scope.sgroup.selectedItems.length == 0 && $scope.sgroup.items.length != 0){
                    $scope.sgroup.selectedItems[0] = $scope.sgroup.items[0];
                    $scope.sgroup.selectedItems[0].rowClass = 'info';
                }
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Сохранить платеж
    $scope.sgroup.savePayment = function(){
        TrainingSrvc.saveSubGroupPayment({id: $scope.sgroup.selectedItems[0].id, 
                                          currencyId: $scope.sgroup.selectedItems[0].currency.id, 
                                          amount: $scope.sgroup.selectedItems[0].amount,
                                          discount: $scope.sgroup.selectedItems[0].discount=='' ? 0: $scope.sgroup.selectedItems[0].discount}).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Платеж для подгруппы сохранен.', 'success', true);
                $scope.sgPaymentForm.$setPristine();
                $scope.sgroup.modalPaymentVisible = false;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });  
    };
    
    // Изменение величины скидки на обучение
    $scope.sgroup.changeDiscount = function(){
        if ($scope.sgroup.selectedItems[0].discount <= 100 && $scope.sgroup.selectedItems[0].discount >= 0){
            $scope.sgroup.selectedItems[0].amount = ($scope.training.data.cost.price - $scope.training.data.cost.price * ($scope.sgroup.selectedItems[0].discount / 100)).toFixed(2) * 1;    
        }
        else{
            $scope.sgroup.selectedItems[0].amount = $scope.sgroup.selectedItems[0].amountReal; 
        }
    };

    // Сохранить данные договора
    $scope.sgroup.saveContract = function(){
        TrainingSrvc.saveSubGroupContract($scope.sgroup.contract).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Данные договора сохранены.', 'success', true);
                $scope.sgContractForm.$setPristine();
                $scope.sgroup.forciblyUpdate++;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });  
    };

    // Отмена изменений платежа
    $scope.sgroup.cancelPayment = function(){
        if ($scope.sgPaymentForm.$pristine){
            $scope.sgroup.modalPaymentVisible = false;    
        }
        $scope.sgroup.forciblyUpdate++;
        $scope.sgPaymentForm.$setPristine();
    };

    // Отслеживание выбранной подгруппы
    $scope.$watch('sgroup.selectedItems[0].id', function(){
        if ($scope.sgroup.selectedItems.length != 0){
        	$scope.sgroup.contract = $scope.sgroup.selectedItems[0].contract;
        	$scope.sgroup.dateSt = $scope.sgroup.contract.dateStart;
        	$scope.sgroup.dateFn = $scope.sgroup.contract.dateFinish;

            if ($scope.sgroup.selectedItems[0].amount == $scope.training.data.cost.price && $scope.sgroup.selectedItems[0].currency.id == $scope.training.data.cost.currency.id){
                $scope.sgroup.selectedItems[0].discount = 0;
            }
        }
        
        if (!$scope.sgPaymentForm.$dirty)
            return;

        $scope.sgroup.forciblyUpdate++;
        $scope.sgPaymentForm.$setPristine();
    },true);

    // При изменении валюты в выбранной подгруппе
    $scope.$watch('sgroup.selectedItems[0].currency.id', function(){ 
        if (!$scope.sgroup.selectedItems[0])
        	return;
        	
        var idx = UtilsSrvc.getIndexes($scope.sgroup.currencies, 'id', $scope.sgroup.selectedItems[0].currency.id)
        
        if (idx.length == 0)
            return;
        
        $scope.sgroup.selectedItems[0].currency.name = $scope.sgroup.currencies[idx[0]].name;
    },true);

  

    // Удалить подгруппу из обучения
    $scope.sgroup.delete = function(item){
        function deleteSGroup(){
            TrainingSrvc.deleteSubGroup($scope.training.data.id, item.id).then(
                function(data){
	                $scope.sgroup.selectedItems = [];
                    $scope.sgroup.forciblyUpdate++;
                    $scope.allstud.forciblyUpdate++;
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Подгруппа удалена.', 'success', true);
                },
                function(response){
                    $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Удалить подгруппу', $filter('localize')("Удалить подгруппу плательщика") + ' ' + item.payer.shortName + "?", deleteSGroup);  
    };

    // Открыть модальное окно для создания новой подгруппы
    $scope.sgroup.add = function(){
        $('#AddSubGroupModal').modal('show');
        $scope.sgroup.modalAddSubGroupVisible = true;

        if (!$scope.sgroup.companies || $scope.sgroup.companies.length == 0)
            $scope.sgroup.loadCompanies();
    };

    // Добавить подгруппу в обучение
    $scope.sgroup.addSubGroup = function(){
        $scope.sgroup.modalAddSubGroupVisible = false;
        
        TrainingSrvc.createSubGroup({trainingId: $scope.training.data.id, 
                                     payerId: $scope.sgroup.newSubGroupPayer ? $scope.sgroup.newSubGroupPayer.id : ''}).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Подгруппа добавлена.', 'success', true);
                $scope.sgroup.forciblyUpdate++;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });  
    };

    /* Подгрузить имена компаний */
    $scope.sgroup.loadCompanies = function(){
        CompanySrvc.getAllCompaniesShortInfo().then(
            function(data){
                $scope.sgroup.companies = data;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            }); 
    };

    // Перейти на страницу для добавления слушателя в подгруппу
    $scope.student.add = function(){
        $location.path('/person').search({type: 'sgstud', sgroup: $scope.sgroup.selectedItems[0].id, training: $scope.training.data.id});
    };
    
    // Перейти на страницу для редактирования слушателя в подгруппу
    $scope.student.edit = function(item){
        $location.path('/person').search({type: 'sgstud', id: item.id, training: $scope.training.data.id});
    };

    // Удалить слушателя из подгруппы
    $scope.student.delete = function(item){
        function deleteSGroupStudent(){
            PersonSrvc.deleteSubGroupStudent($scope.sgroup.selectedItems[0].id, item.id).then(
                function(data){
                    $scope.sgroup.forciblyUpdate++;
                    $scope.allstud.forciblyUpdate++;
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Слушатель удален из подгруппы.', 'success', true);
                },
                function(response){
                    $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Удалить слушателя', $filter('localize')("Удалить слушателя") + ' ' + item.lastName + "?", deleteSGroupStudent);   
    };

    // Отформатировать данные перед отправкой формы
    $scope.sgroup.formatData = function(){
        $scope.sgroup.contract.dateStart = UtilsSrvc.getValidDate($scope.sgroup.dateSt);
        if ($scope.sgroup.contract.dateStart == "")
            $scope.sgroup.dateSt = "";

        $scope.sgroup.contract.dateFinish = UtilsSrvc.getValidDate($scope.sgroup.dateFn);
        if ($scope.sgroup.contract.dateFinish == "")
            $scope.sgroup.dateFn = "";

        $scope.sgroup.contract.city = $scope.training.data.city;
        $scope.sgroup.contract.id = $scope.sgroup.selectedItems[0].id;
    };


    //================= Сертификаты ==========================
    // Загрузка сертификатов
    $scope.cert.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        TrainingSrvc.getCertificates(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, $routeParams.id).then(
            function(data){
                $scope.cert.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.cert.itemsTotal = data.itemsTotal;
                $scope.cert.items = data.items;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Сменить статус печати
    $scope.cert.print = function(item){
         CertificateSrvc.print(item.number).then(
            function(data){
                //$scope.cert.alert = UtilsSrvc.getAlert('Готово!', 'Статус сертификата изменен.', 'success', true);
                $scope.cert.forciblyUpdate++;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Удалить сертификат
    $scope.cert.remove = function(item){
        function removeCert(){
           CertificateSrvc.remove(item.number).then(
              function(data){
                  $scope.cert.forciblyUpdate++;
                  $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Сертификат удалён.', 'success', true);
              },
              function(response){
                  $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
              });
        };

        UtilsSrvc.openMessageBox('Удалить сертификат', $filter('localize')("Удалить сертификат слушателя") + " '" + item.student.lastName + "'?", removeCert); 
    };


    // Экспорт сертификатов
    $scope.cert.exportToCSV = function(){
        ReportSrvc.certificates($scope.training.data.id);
    };

    // Создать все сертификаты
    $scope.cert.createAll = function(){
         TrainingSrvc.createCertificates($routeParams.id).then(
            function(data){
                $scope.cert.forciblyUpdate++;
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Сертификаты обновлены.', 'success', true);
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };


    ///============================= НОВЫЕ СЛУШАТЕЛИ ===========================================
    // Загрузка новых слушателей
    $scope.newstud.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        OrderSrvc.getOrdersNewStudent(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, $routeParams.id).then(
            function(data){
                $scope.newstud.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.newstud.itemsTotal = data.itemsTotal;
                $scope.newstud.items = data.items;

                if ($scope.newstud.selectedItems && $scope.newstud.items && $scope.newstud.selectedItems.length == 0 && $scope.newstud.items.length != 0){
                    $scope.newstud.selectedItems[0] = $scope.newstud.items[0];
                    $scope.newstud.selectedItems[0].rowClass = 'info';
                }
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Удалить заявку
    $scope.newstud.remove = function(item){
        function removeOrd(){
           OrderSrvc.deleteOrderNewStudent(item.id).then(
              function(data){
                  $scope.newstud.forciblyUpdate++;
                  $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Заявка от слушателя удалена.', 'success', true);
              },
              function(response){
                  $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
              });
        };

        UtilsSrvc.openMessageBox('Удалить заявку', $filter('localize')("Удалить заявку от слушателя") + " '" + item.lastName + "'?", removeOrd); 
    };

    // Вызов при каждом выборе студента
    $scope.$watch('newstud.selectedItems[0].id', function(){
        if ($scope.newstud.selectedItems.length == 0)
            return;

        PersonSrvc.getPersonByEmail($scope.newstud.selectedItems[0].email).then(
            function(data){
                $scope.newstud.conflict = data;
            },
            function(response){
                $scope.newstud.conflict = {};
            });
    },true);

    // Открыть диалог смены компании в заявке
    $scope.other.openChangeCompanyDialog = function(){
        if (!$scope.sgroup.companies || $scope.sgroup.companies.length == 0)
            $scope.sgroup.loadCompanies();
        
        $('#ChangeCompanyModal').modal('show');
        $scope.other.modalChangeCompanyVisible = true;
    };

    // Изменение компании в заявке
    $scope.other.changeCompany = function(){
        $scope.other.modalChangeCompanyVisible = false;
        if (!$scope.other.newOrderCompany || !$scope.other.newOrderCompany.id)
            return;
        
        OrderSrvc.changeOrderNewStudentCompany($scope.newstud.selectedItems[0].id, $scope.other.newOrderCompany.id).then(
                function(data){
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Произошла смена компании в заявке.', 'success', true);
                    $scope.newstud.forciblyUpdate++;
                },
                function(response){
                    $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
    };

    // Переход на страницу создания компании
    $scope.other.createCompany = function(){
        $location.path('/company').search({ordernewstudent: $scope.newstud.selectedItems[0].id});
    };

    // Добавление слушателя из заявки в обучение
    $scope.newstud.addIntoTraining = function(type){
        TrainingSrvc.addNewStudentIntoTraining({orderId: $scope.newstud.selectedItems[0].id, trainingId: $scope.training.data.id, type: type}).then(
                function(data){
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Слушатель из заявки добавлен в обучение.', 'success', true);
                    $scope.newstud.forciblyUpdate++;
                    $scope.sgroup.forciblyUpdate++;
					          $scope.allstud.forciblyUpdate++;
					
                    $scope.newstud.selectedItems = [];
                },
                function(response){
                    $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });
    };


    // Загрузить всех слушателей
    $scope.allstud.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        TrainingSrvc.getTrainingStudents(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, $routeParams.id).then(
            function(data){
                $scope.allstud.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.allstud.itemsTotal = data.itemsTotal;
                $scope.allstud.items = data.items;

                if ($scope.allstud.selectedItems && $scope.allstud.items && $scope.allstud.selectedItems.length == 0 && $scope.allstud.items.length != 0){
                    $scope.allstud.selectedItems[0] = $scope.allstud.items[0];
                    $scope.allstud.selectedItems[0].rowClass = 'info';
                }
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    // Перейти на страницу для добавления слушателя в подгруппу
    $scope.allstud.add = function(){
        $location.path('/person').search({type: 'trng', training: $scope.training.data.id});
    };
    
    // Перейти на страницу для редактирования слушателя в подгруппу
    $scope.allstud.edit = function(item){
        $location.path('/person').search({type: 'trng', id: item.id, training: $scope.training.data.id});
    };

    // Удалить слушателя из подгруппы
    $scope.allstud.delete = function(item){
        function deleteTrainingStudent(){
            PersonSrvc.deleteTrainingStudent($scope.training.data.id, item.id).then(
                function(data){
                    $scope.sgroup.forciblyUpdate++;
                    $scope.allstud.forciblyUpdate++;
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Слушатель удален из подгруппы.', 'success', true);
                },
                function(response){
                    $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Удалить слушателя', $filter('localize')("Удалить слушателя") + ' ' + item.lastName + "?", deleteTrainingStudent);   
    };


    $scope.training.loadEvent = function(){
       TrainingSrvc.doEvent({method: "get", id: $routeParams.id}).then(
            function(data){
                data.event.description = data.event.description.replace(/<br>/g, "\n");
                $scope.training.eventData = data;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    $scope.training.createEvent = function(){
       TrainingSrvc.doEvent({method: "create", id: $routeParams.id, event:  $scope.training.eventData.event}).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Событие создано.', 'success', true);
                $scope.training.eventData.event.exists = 1;
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };

    $scope.training.updateEvent = function(){
       TrainingSrvc.doEvent({method: "update", id: $routeParams.id, event:  $scope.training.eventData.event}).then(
            function(data){
                $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Событие обновлено.', 'success', true);
            },
            function(response){
                $scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
            });
    };


    $scope.training.deleteEvent = function(){
        function deleteEvent(){
           TrainingSrvc.doEvent({method: "delete", id: $routeParams.id}).then(
                function(data){
                    //$scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Событие удалено.', 'success', true);
                    $scope.training.loadEvent();      
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Событие удалено.', 'success', true);
                },
                function(response){
                    //$scope.other.alert = UtilsSrvc.getAlert('Внимание!', response.data, 'error', true);
                    $scope.training.loadEvent();      
                    $scope.other.alert = UtilsSrvc.getAlert('Готово!', 'Событие удалено.', 'success', true);
                });
        };

        UtilsSrvc.openMessageBox('Удалить событие', "Удалить событие из календаря?", deleteEvent);   
    };

    $scope.other.init();
    $scope.training.loadData($routeParams.id);
});

]]></CSP>
</Export>
